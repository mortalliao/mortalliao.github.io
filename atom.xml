<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mortalLiao</title>
  <subtitle>Keep learning</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-20T16:18:56.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mortalLiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>07_JavaScript事件</title>
    <link href="http://yoursite.com/2017/05/21/Frontend/JavaScript/07_JavaScript%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/05/21/Frontend/JavaScript/07_JavaScript事件/</id>
    <published>2017-05-20T16:18:56.000Z</published>
    <updated>2017-05-20T16:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript常用事件"><a href="#JavaScript常用事件" class="headerlink" title="JavaScript常用事件"></a>JavaScript常用事件</h1><ul>
<li>鼠标移动事件</li>
<li>鼠标点击事件 </li>
<li>加载与卸载事件 </li>
<li>聚焦与离焦事件</li>
<li>键盘事件</li>
<li>提交与重置事件</li>
<li>选择与改变事件</li>
</ul>
<h2 id="鼠标移动事件"><a href="#鼠标移动事件" class="headerlink" title="鼠标移动事件"></a>鼠标移动事件</h2><p>onmouseout/onmouseover<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">     &lt;script language=&quot;JavaScript&quot;&gt;</div><div class="line">        function mouseovertest()&#123;</div><div class="line">           document.getElementById(&quot;info&quot;).value = &quot;鼠标在输入框上&quot;;</div><div class="line">        &#125;</div><div class="line">        function mouseouttest()&#123;</div><div class="line">            document.getElementById(&quot;info&quot;).value= &quot;鼠标在输入框外&quot;;</div><div class="line">        &#125;</div><div class="line">     &lt;/script&gt;</div><div class="line">     &lt;body&gt;</div><div class="line">     &lt;input type=&quot;text&quot; id=&quot;info&quot; onmouseover=&quot;mouseovertest();&quot; onmouseout=&quot;mouseouttest();&quot;/&gt;</div><div class="line">     &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="其他鼠标事件"><a href="#其他鼠标事件" class="headerlink" title="其他鼠标事件"></a>其他鼠标事件</h2><p>onmouseover  鼠标经过<br>onmouseenter<br>onmouseleave<br>onmouseout  鼠标离开<br>onmousedown  鼠标按下<br>onmouseup  鼠标弹起<br>onmousemove  鼠标移动（1px也触动）  </p>
<h2 id="鼠标点击事件"><a href="#鼠标点击事件" class="headerlink" title="鼠标点击事件"></a>鼠标点击事件</h2><p>onclick<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">    &lt;script language=&quot;JavaScript&quot;&gt;</div><div class="line">       function addFile()&#123;</div><div class="line">            var file = document.createElement(&apos;input&apos;);</div><div class="line">            file.setAttribute(&apos;id&apos;, &apos;temp_file&apos;);</div><div class="line">            file.setAttribute(&apos;type&apos;, &apos;file&apos;);</div><div class="line">            document.body.appendChild(file);</div><div class="line">       &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">    &lt;form action=&quot;uploadFile&quot; method=&quot;post&quot;&gt;</div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;添加附件&quot; onclick=&quot;addFile();&quot;&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="加载与卸载事件"><a href="#加载与卸载事件" class="headerlink" title="加载与卸载事件"></a>加载与卸载事件</h2><p>onload/unload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;script Language=&quot;JavaScript&quot;&gt;</div><div class="line">    function loadform()&#123;</div><div class="line">        alert(&quot;这是一个自动装载例子!&quot;);</div><div class="line">    &#125;</div><div class="line">    function unloadform()&#123;</div><div class="line">       alert(&quot;这是一个卸载例子!&quot;);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body onload=“loadform()” onbeforeunload=“unloadform()”&gt;</div><div class="line">    &lt;a href=“http://www.itcast.cn”&gt;传智播客&lt;/a&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="聚焦与离焦事件"><a href="#聚焦与离焦事件" class="headerlink" title="聚焦与离焦事件"></a>聚焦与离焦事件</h2><p>onfocus/onblur<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;script language=&quot;JavaScript&quot;&gt;</div><div class="line">function checkDate()&#123;</div><div class="line">    var date1 = document. getElementById(&quot;testdate&quot;).value;</div><div class="line">    if(date1.match(&quot;^\\d&#123;8&#125;$&quot;)==null)&#123;alert(&quot;wrong&quot;);&#125;</div><div class="line">    else&#123;alert(&quot;right&quot;);&#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    请输入一个八位数字&lt;input type=&quot;text&quot; id=&quot;testdate&quot; onblur=&quot;checkDate();&quot;&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><p>keydown/keyup/keypress<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;script language=&quot;JavaScript&quot;&gt;</div><div class="line">function submitform(e)&#123;</div><div class="line">    if(e.keyCode)&#123;</div><div class="line">        if (e.keyCode == 13) &#123;document.forms(0).submit();&#125;  </div><div class="line">    &#125;else&#123;</div><div class="line">        if (e.which == 13) &#123;document.forms(0).submit();&#125;  </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;body&gt;</div><div class="line">没有按钮的表单，用回车键提交</div><div class="line">&lt;form action=&quot;login&quot;&gt;</div><div class="line">    &lt;input type=&quot;text&quot; name=&quot;username&quot; onkeypress=&quot;submitform(event);&quot;/&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="提交与重置事件"><a href="#提交与重置事件" class="headerlink" title="提交与重置事件"></a>提交与重置事件</h2><p>submit/reset<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;script language=&quot;JavaScript&quot;&gt;</div><div class="line">    function isDelete()&#123;</div><div class="line">        var isdelete= window.confirm();</div><div class="line">        if(isdelete)&#123;</div><div class="line">            return true;</div><div class="line">        &#125;else&#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form action=&quot;delete&quot; onsubmit=&quot;return isDelete();&quot;&gt;</div><div class="line">    姓名：小明  年龄：23  学校：清华大学</div><div class="line">    &lt;input type=&quot;submit&quot; value=&quot;删除&quot;&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="选择与改变事件"><a href="#选择与改变事件" class="headerlink" title="选择与改变事件"></a>选择与改变事件</h2><p>select/change<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;script src=&quot;content.js&quot; language=&quot;javascript&quot;&gt;&lt;/script&gt;</div><div class="line">   &lt;body&gt;</div><div class="line">        &lt;select id=&quot;provice&quot; onchange=&quot;changecontent();&quot;&gt;</div><div class="line">            &lt;option value=&quot;0&quot;&gt;请选择省份&lt;/option&gt;</div><div class="line">            &lt;option value=&quot;1&quot;&gt;河北&lt;/option&gt;</div><div class="line">            &lt;option value=&quot;2&quot;&gt;山东&lt;/option&gt;</div><div class="line">        &lt;/select&gt;</div><div class="line">        &lt;select id=&quot;city&quot;&gt;&lt;/select&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript常用事件&quot;&gt;&lt;a href=&quot;#JavaScript常用事件&quot; class=&quot;headerlink&quot; title=&quot;JavaScript常用事件&quot;&gt;&lt;/a&gt;JavaScript常用事件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;鼠标移动事件&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>02_JS内置对象</title>
    <link href="http://yoursite.com/2017/05/21/Frontend/JavaScript/02_JS%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/05/21/Frontend/JavaScript/02_JS内置对象/</id>
    <published>2017-05-20T16:18:56.000Z</published>
    <updated>2017-05-20T16:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>声明：  </p>
<ol>
<li>var shuzu = new Array();<br>var array = new Array(5);  </li>
<li>var array = [];<br>var array = [1,2];  </li>
</ol>
<p>赋值：<br>通过数组名称加上中括号，在中括号中加上数据的下标（位置的标号）得到这个数据，给它赋值。<br>Shuzu[0] = 1 ;//[0] 选择器  </p>
<p>数组对象的属性：<br>length 数组的长度  </p>
<h2 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h2><p>instanceof<br>Array.isArray(); //HTML5中新增</p>
<h2 id="如何判断数组中是否存在指定的值"><a href="#如何判断数组中是否存在指定的值" class="headerlink" title="如何判断数组中是否存在指定的值"></a>如何判断数组中是否存在指定的值</h2><ol>
<li>for循环 如果找到了就输出</li>
<li>indexOf  返回值为指定的数对应的索引，如果没有找到 返回-1</li>
</ol>
<h2 id="数组中常用-的方法："><a href="#数组中常用-的方法：" class="headerlink" title="数组中常用 的方法："></a>数组中常用 的方法：</h2><p>slice(0, 3); // 用来从数组中得到对应两个下标的内容，单独作为一个数组保存，注意不包括最后那个<br>splice(2,1,”abc”);<br>// 用来向指定的位置插入元素<br>// 第一个参数是：从哪个下标开始  第二个参数是要替换几个索引长度，最后是插入什么内容。<br>// 如果第二个参数是一：说明要替换一个<br>// splice(0,ary.length);// 清空数组<br>toSource(); // 返回该对象的源代码<br>toString(); // 把数组转换为字符串，并返回结果<br>toLocalString(); // 向数组的开头添加一个或者更多元素，并返回新的长度。<br>valueOf(); // 返回数组对象的原始值</p>
<p>push(); // 向数组的末尾添加一个或更多元素，并返回新的长度<br>pop(); // 删除并返回数组的最后一个元素  </p>
<p>shift(); // 删除并返回数组的第一个元素<br>unshift(); // 向数组的顶端添加一个或更多元素，并返回新的长度  </p>
<p>map(function(val,index,arr){}) // 迭代数组<br>map 方法会迭代数组中的每一个元素，并根据回调函数来处理每一个元素，最后返回一个新数组。注意，这个方法不会改变原始数组。<br>在我们的例子中，回调函数只有一个参数，即数组中元素的值 (val 参数) ，但其实，你的回调函数也可以支持多个参数，譬如：元素的索引index、原始数组arr。  </p>
<p>reduce(function(previousVal, currentVal){}, 0) // 用来迭代一个数组，并且把它累积到一个值中<br>使用 reduce 方法时，你要传入一个回调函数，这个回调函数的参数是一个 累加器 （比如例子中的 previousVal) 和当前值 (currentVal）。<br>reduce 方法有一个可选的第二参数，它可以被用来设置累加器的初始值。如果没有在这定义初始值，那么初始值将变成数组中的第一项，而 currentVal 将从数组的第二项开始。  </p>
<p>filter(function(val){}) // 用来迭代一个数组，并且按给出的条件过滤出符合的元素<br>filter 方法传入一个回调函数，这个回调函数会携带一个参数，参数为当前迭代的项（我们叫它 val ）。<br>回调函数返回 true 的项会保留在数组中，返回 false 的项会被过滤出数组。  </p>
<p>sort(); // 很容易的按字母顺序或数字顺序对数组中的元素进行排序<br>与我们之前用的数组方法仅仅返回一个新数组不同， sort 方法将改变原数组，返回被排序后的数组。<br>sort 可以把比较函数作为参数传入。比较函数有返回值，当 a 小于 b，返回一个负数；当 a 大于 b ，返回一个正数；相等时返回0。<br>如果没有传入比较函数，它将把值全部转成字符串，并按照字母顺序进行排序。  </p>
<p>reverse(); // 翻转数组  </p>
<p>concat(); // 用来把两个数组的内容合并到一个数组中<br>concat 方法的参数应该是一个数组。参数中的数组会拼接在原数组的后面，并作为一个新数组返回。  </p>
<p>join(); // 把数组转换成字符串，里面的每一个元素可以用你指定的连接符来连接起来，这个连接符就是你要传入的参数  </p>
<h2 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h2><p>var arr = [1, 2, 3];<br>arr = [];//方法一<br>arr.length = 0;//方法二<br>arr = null;//方法三<br>delete arr;//方法四<br>splice(0,ary.length);// 方法五  </p>
<h2 id="删除数组几种方法"><a href="#删除数组几种方法" class="headerlink" title="删除数组几种方法"></a>删除数组几种方法</h2><ol>
<li>delete方法:delete arr[1];<br>这种方式数组长度不变,此时arr[1]变为undefined了,但是也有好处原来数组的索引也保持不变,此时要遍历数组元素可以才用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for(index in arr)&#123;</div><div class="line">    document.write(&apos;arr[&apos;+index+&apos;]=&apos;+arr[index]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这种遍历方式跳过其中undefined的元素  </p>
<ol>
<li>数组对象splice方法:array.splice(1,1);<br>这种方式数组长度相应改变,但是原来的数组索引也相应改变  </li>
</ol>
<blockquote>
<p>注意：</p>
<ol>
<li>在js中数组一旦定义好了，那么它就是一个无穷大的容器。</li>
<li>数组是从0开始存储的</li>
<li>数组定义好了以后的长度是0;</li>
</ol>
</blockquote>
<h2 id="迭代方法-不会修改原数组"><a href="#迭代方法-不会修改原数组" class="headerlink" title="迭代方法 不会修改原数组"></a>迭代方法 不会修改原数组</h2><p>every()、filter()、forEach()、map()、some()</p>
<h1 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h1><p>Math.pow(2,20); //得到2的20次方的值<br>Math.round(0.5); //1 四舍五入<br>Math.ceil(1.01); //2 向上取值<br>Math.floor(1.9); //1 向下取值<br>Math.abs(-5); //5 求绝对值<br>Math.max(a,b,c…); // 从这组数中取出最大的值（最少为两个数）<br>Math.min(x,y,z); // 返回最小值<br>Math.random(); // 随机生成一个0到1的随机数<br>Math.PI; // 圆周率<br>Math.E; // e: 自然对数的底数<br>Math.sqrt(3); // 3的平方根<br>Math.pow(3, 1/3); // 3的立方根<br>Math.sin(0); // 三角函数： 还有Math.cos(); Math:atan等<br>Math.log(10); // 10的自然对数<br>Math.lot(100)/Math.LN10 // 以10为底100的对数<br>Math.log(512)/Math.LN2 // 以2为底512的对数<br>Math.exp(3); // e的三次幂</p>
<h1 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h1><p>Date-引用类型，JavaScript中的内置对象<br>获取当前时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var date = new Date();   //UTC的时间</div><div class="line">//返回数字，时间的毫秒形式</div><div class="line">var date = Date.now();   //HTML5，IE9+</div><div class="line">var date = +new Date();  //不支持now方法的时候</div></pre></td></tr></table></figure></p>
<p>Date(); // 返回当日的日期和时间<br>getDate(); // 从Date对象返回一个月中的某一天(1~31)<br>getDay(); // 从Date对象返回一周中的某一天(0~6)<br>getMonth(); // 从Date对象返回月份(0~11)<br>getFullYear(); // 从Date对象以四位数字返回年份<br>getYear(); // 请使用getFullYear();方法代替<br>getHours(); // 返回Date对象的小时(0~23)<br>getMinutes(); // 返回Date对象的分钟(0~59)<br>getSeconds(); // 返回Date对象的秒数(0~59)<br>getMilliseconds(); // 返回Date对象的毫秒(0~999)<br>getTime(); // 返回1970年1月1日至今的毫秒数<br>getTimezoneOffset(); // 返回本地时间与格林威治标准时间(GMT)的分钟差<br>parse(); // 返回1970年1月1日午夜到指定日期(字符串)的毫秒数<br>setDate(); // 设置Date对象中月的某一天(1~31)<br>setMonth(); // 设置Date对象中月份(0~11)<br>setFullYear(); // 设置Date对象中额年份(四位数)<br>setHours(); // 设置Date对象中的小时(0~23)<br>setMinutes(); // 设置Date对象中的分钟(0~59)<br>setSeconds(); // 设置Date对象中的秒钟(0~59)<br>setMilliseconds(); // 设置Date对象中的毫秒(0~999)<br>setTime(); // 以毫秒设置Date对象<br>toString(); // 把Date对象转换为字符串<br>toTimeString(); // 把Date对象的时间部分转换为字符串<br>toDateString(); // 把Date对象的日期部分转换为字符串<br>toLocalString(); // 根据本地时间格式，把Date对象转换为字符串  </p>
<h2 id="日期转换"><a href="#日期转换" class="headerlink" title="日期转换"></a>日期转换</h2><ul>
<li>var date = new Date(2005,10,1);<br>可以接受三种参数<ul>
<li>2005，10，1日期的每一部分  </li>
<li>“2005-10-1”  字符串的日期格式  </li>
<li>表示日期的毫秒形式1128096000000  </li>
</ul>
</li>
<li>var date = Date.parse(“2005-10-1”);<br>把字符串或2005，10，1日期的每一部分转换成日期的毫秒形式，如果字符串的格式不是时间的正确格式返回NaN</li>
</ul>
<h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><p>为了方便操作基本数据类型，JavaScript还提供了三个特殊的引用类型：String/Number/Boolean</p>
<ul>
<li>例如：<br>var s1 = “zhangsan”;<br>var s2 = s1.substring(5);  </li>
<li>s1是基本类型，基本类型是没有方法的</li>
<li>当调用s1.substring(5)的时候，先把s1包装成String类型的临时对象，再调用substring方法，最后销毁临时对象<br>相当于：<br>var s1 = new String(“zhangsan”);<br>var s2 = s1.substring(5);<br>s1 = null;  </li>
<li>创建基本包装类型的对象<br>var num = 18;  //数值，基本类型<br>var num = Number(“18”); //类型转换<br>var num = new Number(18); //基本包装类型，对象  </li>
<li>Number和Boolean基本包装类型基本不用，使用的话可能会引起歧义<br>例如：<br>var b1 = new Boolean(false);<br>var b2 = b1 &amp;&amp; true;  </li>
</ul>
<h1 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h1><p>big(); // 用大号字体显示字符串<br>blink(); // 显示闪动字符串<br>bold(); // 使用粗体显示字符串<br>fontcolor(); // 使用指定的颜色来显示字符串<br>fontsize(); // 使用指定的尺寸来显示字符串<br>fixed(); // 以打字机文本显示字符串<br>italics(); // 使用斜体显示字符串<br>small(); // 使用小字号来显示字符串<br>sub(); // 把字符串显示为下标<br>sup(); // 把字符串显示为上标<br>strike(); // 使用删除线来显示字符串  </p>
<p>charAt(); // 返回在指定位置的字符<br>charCodeAt(); // 返回在指定的位置的字符的Unicode编码<br>concat(); // 连接字符串<br>fromCharCode(); // 从字符编码创建一个字符串<br>indexOf(); // 检索字符串<br>lastIndexOf(); // 从后向前搜索字符串<br>link(); // 将字符串显示为链接<br>localeCompare(); // 用本地特定的顺序来比较两个字符串<br>match(); // 找到一个或多个正则表达式的匹配<br>replace(); // 替换与正则表达式匹配的子串<br>search(); // 检索与正则表达式相匹配的值<br>slice(start [,end]); // 提去字符串的片段，并在新的字符串中返回被提取的部分  </p>
<p>split(“s”) // 按指定分隔符将字符串分割为数组  </p>
<p>substr(start [,number]); // 从起始索引号提取字符串中指定数目的字符<br>substring(start [,end]); // 提取字符串中两个指定的索引号之间的字符<br>toLowerCase(); // 把字符串转换为小写<br>toUpperCase(); // 把字符串转换为大写<br>trim()  //只能去除字符串前后的空白  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;p&gt;声明：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;var shuzu = new Array();&lt;br&gt;var array = new Array(5
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>03_JS正则表达式</title>
    <link href="http://yoursite.com/2017/05/21/Frontend/JavaScript/03_JS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/05/21/Frontend/JavaScript/03_JS正则表达式/</id>
    <published>2017-05-20T16:18:56.000Z</published>
    <updated>2017-05-20T16:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS正则表达式"><a href="#JS正则表达式" class="headerlink" title="JS正则表达式"></a>JS正则表达式</h1><h2 id="创建正则表达式对象的方式："><a href="#创建正则表达式对象的方式：" class="headerlink" title="创建正则表达式对象的方式："></a>创建正则表达式对象的方式：</h2><ol>
<li>方式一（推荐）：/pattern/[flags]  </li>
</ol>
<ul>
<li>pattern：正则表达式的规则；  </li>
<li><p>边界：</p>
<ul>
<li>^（开始）</li>
<li>$ (结束)</li>
</ul>
</li>
<li><p>flag：模式</p>
<ul>
<li>i 代表忽略大小写；</li>
<li>g 全文匹配</li>
</ul>
</li>
</ul>
<ol>
<li>new RegExp(“pattern”,[“flags”])</li>
</ol>
<h2 id="正则表达式的方法："><a href="#正则表达式的方法：" class="headerlink" title="正则表达式的方法："></a>正则表达式的方法：</h2><p>test(); // 匹配正则表达式的规则，如果匹配到就返回true，否则返回false；<br>exec(); // 查找字符串中符合正则表达式的内容；</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS正则表达式&quot;&gt;&lt;a href=&quot;#JS正则表达式&quot; class=&quot;headerlink&quot; title=&quot;JS正则表达式&quot;&gt;&lt;/a&gt;JS正则表达式&lt;/h1&gt;&lt;h2 id=&quot;创建正则表达式对象的方式：&quot;&gt;&lt;a href=&quot;#创建正则表达式对象的方式：&quot; class
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>04_JS面向对象与函数</title>
    <link href="http://yoursite.com/2017/05/21/Frontend/JavaScript/04_JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/05/21/Frontend/JavaScript/04_JS面向对象与函数/</id>
    <published>2017-05-20T16:18:56.000Z</published>
    <updated>2017-05-20T16:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS的面向对象与函数"><a href="#JS的面向对象与函数" class="headerlink" title="JS的面向对象与函数"></a>JS的面向对象与函数</h1><p><strong>JS不是面向对象的，而是基于对象. JS中的函数就是对象</strong>  </p>
<h2 id="对象的定义"><a href="#对象的定义" class="headerlink" title="对象的定义"></a>对象的定义</h2><ol>
<li>var p1 = new Object();</li>
<li>var p2 = {}</li>
<li>function P{}</li>
</ol>
<h2 id="将三种定义形式-分成两类"><a href="#将三种定义形式-分成两类" class="headerlink" title="将三种定义形式.分成两类."></a>将三种定义形式.分成两类.</h2><p>普通形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">      name:&quot;张三&quot;,</div><div class="line">      sayHello:function()&#123;</div><div class="line">        alert(&quot;Hello World!&quot;);</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function Person()&#123;</div><div class="line">    this.name = “李四”;</div><div class="line">    this.sayHello = function()&#123;</div><div class="line">        console.log(&quot;hello&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用var p = new Person();</p>
<blockquote>
<p>构造函数（就是为了创建对象实例）</p>
<ol>
<li>可以创建对象实例的函数。</li>
<li>区别与普通函数，首字母大写。</li>
</ol>
</blockquote>
<h2 id="私有化"><a href="#私有化" class="headerlink" title="私有化"></a>私有化</h2><p>对象拥有自己的特征，称为 属性，对象还有自己的函数，称为 方法 。  </p>
<p>在前面的课程（构造函数）中，我们使用了 this 指向当前（将要被创建的）对象中的 公有属性 。  </p>
<p>我们也可以创建 私有属性 和 私有方法 ，它们两个在对象外部是不可访问的。  </p>
<p>为了完成这个任务，我们在 构造函数 中，使用我们熟悉的 var 关键字去创建变量，来替代我们使用 this 创建 属性 。  </p>
<p>比如，我们想记录我们的car行驶的 speed ，但是我们希望外面的代码对 speed 的修改只能是加速或减速（而不是变成字符串、直接赋值成某个速度等其他操作），那么如何达到这类操作的目的呢？  </p>
<p>编辑器中的 构造函数 展示了如何实现这种控制模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">var Car = function() &#123;</div><div class="line">  // this is a private variable</div><div class="line">  var speed = 10;</div><div class="line"></div><div class="line">  // these are public methods</div><div class="line">  this.accelerate = function(change) &#123;</div><div class="line">    speed += change;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  this.decelerate = function() &#123;</div><div class="line">    speed -= 5;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  this.getSpeed = function() &#123;</div><div class="line">    return speed;</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var Bike = function() &#123;</div><div class="line"></div><div class="line">  // 只能在这一行下面写代码</div><div class="line">  var gear ;</div><div class="line">  </div><div class="line">  this.getGear = function()&#123;</div><div class="line">    return gear;</div><div class="line">  &#125;;</div><div class="line">  </div><div class="line">  this.setGear = function(change)&#123;</div><div class="line">     gear = change;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">var myCar = new Car();</div><div class="line">var myBike = new Bike();</div></pre></td></tr></table></figure></p>
<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><ol>
<li>开辟内存空间，存储新创建的对象 new Object() </li>
<li>把this设置为当前对象</li>
<li>执行内部代码，设置对象属性和方法</li>
<li>返回新创建的对象</li>
</ol>
<h2 id="JSON-JavaScript-Object-Notation"><a href="#JSON-JavaScript-Object-Notation" class="headerlink" title="JSON (JavaScript Object Notation)"></a>JSON (JavaScript Object Notation)</h2><p>JSON的属性必须用双引号引号引起来，对象字面量可以省略<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for( var i in jsonObj)&#123;</div><div class="line">       box.style[i] = jsonObj[i];</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="遍历对象的属性"><a href="#遍历对象的属性" class="headerlink" title="遍历对象的属性"></a>遍历对象的属性</h2><p>for … in 遍历对象的属性或者方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;&#125;;</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">  obj[i] = i * 2;</div><div class="line">&#125;</div><div class="line">for(var key in obj) &#123;</div><div class="line">    console.log(key + &quot;==&quot; + obj[key]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="JS中的函数"><a href="#JS中的函数" class="headerlink" title="JS中的函数"></a>JS中的函数</h1><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><ul>
<li><p>一种：普通方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function 函数名(参数列表)&#123;</div><div class="line">    函数体</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>二种:构造方式(动态函数)<br>内置对象 Function  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var 函数名 = new Function(“参数列表”,”函数体”);</div></pre></td></tr></table></figure>
</li>
<li><p>三种:直接量方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var 函数名 = function(参数列表)&#123;</div><div class="line">    函数体</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="函数中变量作用范围"><a href="#函数中变量作用范围" class="headerlink" title="函数中变量作用范围"></a>函数中变量作用范围</h2><p>在JavaScript中存在于两个域的.<br>全局域和函数域.</p>
<h3 id="变量和作用域（函数中的变量需要函数执行后才能使用）"><a href="#变量和作用域（函数中的变量需要函数执行后才能使用）" class="headerlink" title="变量和作用域（函数中的变量需要函数执行后才能使用）"></a>变量和作用域（函数中的变量需要函数执行后才能使用）</h3><ol>
<li><p>全局变量（成员变量）<br>哪里都可以访问到的变量。<br>（进入script立即定义的变量和没有var的变量）  </p>
</li>
<li><p>局部变量<br>函数内部的变量，只有函数内部可以访问到。<br>（函数内部用var定义的变量和形参）  </p>
</li>
</ol>
<h3 id="隐式全局变量"><a href="#隐式全局变量" class="headerlink" title="隐式全局变量"></a>隐式全局变量</h3><p>隐式全局变量就是隐藏的全局变量不好被发现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function  fn()&#123;</div><div class="line">    var  a  =  b  =  c  =  1;   // b和c就是隐式全局变量</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function  fn()&#123;</div><div class="line">    var  a  =  b  =  c  =  1;   // b和c就是隐式全局变量（等号）</div><div class="line">    var  a = 1;  b = 2;  c = 3;     // b和c就是隐式全局变量（分号）</div><div class="line">    var  a = 1 ,  b = 2 ,  c = 3;    // b和c就不是隐式全局变量（逗号）</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>小知识：<br>函数不调用不执行<br>函数名就等于（整个函数）<br>加载函数的时候，只加载函数名，不加载函数体<br>参数相当于局部变量<br>就近原则使用变量<br>两个平级的函数中的变量不会相互影响（可以使用同样的形参名）</p>
</blockquote>
<h2 id="特殊的函数"><a href="#特殊的函数" class="headerlink" title="特殊的函数"></a>特殊的函数</h2><ul>
<li>回调函数：作为参数传递的函数  </li>
<li>匿名函数：没有函数名的函数<br>  作用：  <pre><code>1. 不需要定义函数名的时候。  
2. 书写起来更简便。  
</code></pre>  匿名函数的调用有三种方法：  <pre><code>1. 直接调用或自调用。(function(){alert(1)})()  
2. 事件绑定。  
3. 定时器。  
</code></pre></li>
<li>匿名回调函数：这个方法作为参数传递而且还没有方法名  </li>
<li>私有函数:定义在函数内部的函数.  <ul>
<li>保证函数的内部代码私有性。  </li>
<li>一个函数执行多个逻辑  </li>
</ul>
</li>
<li>返回函数的函数  </li>
<li>自调函数:定义()()  <ul>
<li>第一个小括号是函数定义  </li>
<li>第二个小括号是函数调用.  </li>
</ul>
</li>
</ul>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><blockquote>
<p>注意</p>
<ol>
<li>如果函数没有显示的使用 return语句 ，那么函数有默认的返回值：undefined</li>
<li>如果函数使用 return语句，那么跟在return后面的值，就成了函数的返回值</li>
<li>如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined</li>
<li>函数使用return语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说return后面的所有其他代码都不会再执行。</li>
</ol>
</blockquote>
<h2 id="函数名、函数体和函数加载问题"><a href="#函数名、函数体和函数加载问题" class="headerlink" title="函数名、函数体和函数加载问题"></a>函数名、函数体和函数加载问题</h2><ol>
<li><p>函数名是什么<br>函数名 == 整个函数。<br>function fn(){alert(1)};<br>console.log(fn) == console.log(function fn(){alert(1)});  </p>
</li>
<li><p>函数加载问题<br>JS加载的时候，只加载函数名，不加载函数体。所以如果想使用内部的成员变量，需要调用函数。  </p>
</li>
</ol>
<h2 id="JS函数中的重载问题"><a href="#JS函数中的重载问题" class="headerlink" title="JS函数中的重载问题"></a>JS函数中的重载问题</h2><p>函数的重载:一个类中的方法名相同，但是参数个数或参数类型不同.<br>JS中本身没有重载需要使用arguments对象来实现类似与重载的效果 arguments本身就是数组.<br>arguments存的方法中的参数.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 使用argument模拟重载效果.</div><div class="line">function add()&#123;</div><div class="line">    if(arguments.length == 2)&#123;</div><div class="line">        return arguments[0] + arguments[1];</div><div class="line">    &#125;else if(arguments.length == 3)&#123;</div><div class="line">        return arguments[0] + arguments[1] + arguments[2];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">alert(add(1,2,3));</div></pre></td></tr></table></figure></p>
<h2 id="JS中的继承"><a href="#JS中的继承" class="headerlink" title="JS中的继承:"></a>JS中的继承:</h2><p>要了解继承就需要先了解prototype属性.在每个函数对象中都有一个prototype的属性.<br>那么就可以使用prototype对对象进行扩展（包括内建对象）<br>prototype:原型.作用用类对函数对象.进行扩展.  </p>
<p>JS扩展内建对象.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 扩展Array对象.判断某一个值是否在数组中。</div><div class="line">Array.prototype.inArrays = function(val)&#123;</div><div class="line">    for(var i = 0;i&lt;this.length;i++)&#123;</div><div class="line">        if(this[i]==val)&#123;</div><div class="line">            return true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;</div><div class="line">var arr = [&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;];</div><div class="line">alert(arr.inArrays(&quot;black&quot;));</div></pre></td></tr></table></figure></p>
<p>JS中的继承：JS中本身没有继承，实现继承的效果. prototype就是一个函数对象的属性.利用了这个属性的扩展功能(扩展了的属性和方法  就可以当成在自己类定义的时候定义的那个属性和方法.)<br>利用prototype完成继承的效果.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function A()&#123;</div><div class="line">    this.aName = &apos;a&apos;;</div><div class="line">&#125;</div><div class="line">function B()&#123;</div><div class="line">    this.bName = &apos;b&apos;;</div><div class="line">&#125;</div><div class="line">B.prototype = new A();</div></pre></td></tr></table></figure></p>
<p>另一种继承 原型继承.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function A()&#123;&#125;</div><div class="line">A.prototype = &#123;</div><div class="line">    aName : &quot;a&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function B()&#123;</div><div class="line">    this.bName = &quot;b&quot;;</div><div class="line">&#125;</div><div class="line">B.prototype = A.prototype;</div><div class="line">var b = new B();</div><div class="line">alert(b.bName);</div><div class="line">alert(b.aName);</div></pre></td></tr></table></figure></p>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ol>
<li>this只出现在函数中。</li>
<li>谁调用函数，this就指的是谁。</li>
<li>new People();   People中的this代指被创建的对象实例。</li>
</ol>
<h1 id="JavaScript-全局函数-global"><a href="#JavaScript-全局函数-global" class="headerlink" title="JavaScript 全局函数(global)"></a>JavaScript 全局函数(global)</h1><p>encodeURI / decodeURI   编解码URI<br>进行url跳转时可以整体使用encodeURI<br>escape / unescape  对字符串进行unicode编码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1、escape不编码字符有69个：*，+，-，.，/，@，_，0-9，a-z，A-Z </div><div class="line">2、encodeURI不编码字符有82个：!，#，$，&amp;，&apos;，(，)，*，+，,，-，.，/，:，;，=，?，@，_，~，0-9，a-z，A-Z </div><div class="line">3、encodeURIComponent不编码字符有71个：!， &apos;，(，)，*，-，.，_，~，0-9，a-z，A-Z</div></pre></td></tr></table></figure></p>
<p>isNaN(); 检查某个值是否为数字<br>eval(); 把javascript 字符串作为脚本代码来执行<br>parseInt(); 方法：把字符串转换成整数  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS的面向对象与函数&quot;&gt;&lt;a href=&quot;#JS的面向对象与函数&quot; class=&quot;headerlink&quot; title=&quot;JS的面向对象与函数&quot;&gt;&lt;/a&gt;JS的面向对象与函数&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;JS不是面向对象的，而是基于对象. JS中的函数就是对象&lt;/
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>05_JS-BOM</title>
    <link href="http://yoursite.com/2017/05/21/Frontend/JavaScript/05_JS-BOM/"/>
    <id>http://yoursite.com/2017/05/21/Frontend/JavaScript/05_JS-BOM/</id>
    <published>2017-05-20T16:18:56.000Z</published>
    <updated>2017-05-20T16:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BOM-Browser-Object-Model-浏览器对象模型"><a href="#BOM-Browser-Object-Model-浏览器对象模型" class="headerlink" title="BOM:Browser Object Model(浏览器对象模型.)"></a>BOM:Browser Object Model(浏览器对象模型.)</h1><ul>
<li>Window:对象表示浏览器中打开的窗口 最顶层对象.</li>
<li>Navigator :浏览器对象.</li>
<li>Screen: 屏幕对象</li>
<li>History:浏览器历史对象</li>
<li>Location:地址对象.</li>
</ul>
<h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><p>alert();   :弹出一个提示框.<br>confirm(); :弹出一个确认框<br>prompt();  :输入框<br>setTimeout(code,millisec);定时 执行一次就ok了  </p>
<ul>
<li>setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式  </li>
<li>setTimeout() 只执行 code 一次。如果要多次调用，可以让 code 自身再次调用 setTimeout()。  </li>
</ul>
<p>setInterval(code,millisec[,”lang”]);定时 循环执行  </p>
<ul>
<li>setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式</li>
<li>setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭</li>
</ul>
<p>clearTimeout();清除定时<br>clearInterval();清除定时  </p>
<p>window.open(url,target,param)  </p>
<ul>
<li>url 要打开的地址</li>
<li>target新窗口的位置 _blank  _self  _parent(父框架)</li>
<li>param 新窗口的一些设置</li>
<li>返回值，新窗口的句柄</li>
</ul>
<p>新窗口.moveTo(5,5)    新窗口.moveBy()<br>新窗口.resizeTo()   window.resizeBy()  </p>
<p>close():窗口关闭了.  </p>
<h2 id="history对象：浏览器的历史对象"><a href="#history对象：浏览器的历史对象" class="headerlink" title="history对象：浏览器的历史对象"></a>history对象：浏览器的历史对象</h2><p>历史记录管理</p>
<ul>
<li><p>后退<br>history.back()<br>history.go(-1)    0是刷新  </p>
</li>
<li><p>前进<br>history.forward()<br>history.go(1)  </p>
</li>
</ul>
<h2 id="screen对象-屏幕对象"><a href="#screen对象-屏幕对象" class="headerlink" title="screen对象:屏幕对象"></a>screen对象:屏幕对象</h2><p>width<br>height  </p>
<h2 id="location对象：地址对象"><a href="#location对象：地址对象" class="headerlink" title="location对象：地址对象"></a>location对象：地址对象</h2><p>window.location<br>location相当于浏览器地址栏<br>可以将url解析成独立的片段  </p>
<p>location对象的属性<br>href<br>hash   返回url中#后面的内容，包含#<br>host    主机名，包括端口<br>hostname   主机名<br>pathname     url中的路径部分<br>protocol    协议 一般是http、https<br>search         查询字符串  </p>
<p>location对象的方法<br>location.assign()    改变浏览器地址栏的地址，并记录到历史中<br>设置location.href  就会调用assign()。一般使用location.href 进行页面之间的跳转<br>location.replace()    替换浏览器地址栏的地址，不会记录到历史中<br>location.reload()    重新加载  </p>
<h2 id="navigator对象：浏览器对象"><a href="#navigator对象：浏览器对象" class="headerlink" title="navigator对象：浏览器对象"></a>navigator对象：浏览器对象</h2><p>window.navigator 的一些属性可以获取客户端的一些信息<br>userAgent    (系统，浏览器)<br>platform       (浏览器支持的系统，win/mac/linux)  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;BOM-Browser-Object-Model-浏览器对象模型&quot;&gt;&lt;a href=&quot;#BOM-Browser-Object-Model-浏览器对象模型&quot; class=&quot;headerlink&quot; title=&quot;BOM:Browser Object Model(浏览器
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>06_JS-DOM</title>
    <link href="http://yoursite.com/2017/05/21/Frontend/JavaScript/06_JS-DOM/"/>
    <id>http://yoursite.com/2017/05/21/Frontend/JavaScript/06_JS-DOM/</id>
    <published>2017-05-20T16:18:56.000Z</published>
    <updated>2017-05-20T16:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM（文档对象模型）"><a href="#DOM（文档对象模型）" class="headerlink" title="DOM（文档对象模型）"></a>DOM（文档对象模型）</h1><ul>
<li>文档：标记型文档</li>
<li>对象：封装了属性和行为的实例，可以直接被调用。</li>
<li>模型：所有的标记型文档都具有一些共性特征的一个体现。</li>
<li>用来将标记型文档封装成对象，并将标记型文档中的所有内容（标签、文本、属性）都封装成对象。</li>
<li>封装成对象的目的是为了更方便的操作这些文档及其文档中的所有内容。因为对象包含属性和行为。</li>
<li>标记型文档包含标签、属性、标签中封装的数据。只要是标记型文档，DOM这种技术都可以对其进行操作。</li>
<li>常见的标记型文档包括：HTML   XML。</li>
<li>DOM要操作标记型文档必须先进行解析。</li>
</ul>
<h1 id="DOM三个级别和DHTML介绍"><a href="#DOM三个级别和DHTML介绍" class="headerlink" title="DOM三个级别和DHTML介绍"></a>DOM三个级别和DHTML介绍</h1><h2 id="DOM模型有三种："><a href="#DOM模型有三种：" class="headerlink" title="DOM模型有三种："></a>DOM模型有三种：</h2><p>DOM level 1：将html文档封装成对象。<br>DOM level 2：在level 1的基础上添加新的功能，例如：对于事件和css样式的支持。<br>DOM level 3：支持xml1.0的一些新特性。  </p>
<h2 id="DHTML"><a href="#DHTML" class="headerlink" title="DHTML"></a>DHTML</h2><p>动态的HTML，它不是一门语言，是多项技术综合体的简称。<br>包括html，css，dom，javascript。<br>这四种语言的职责：<br>HTML：负责提供标签，封装数据，这样便于操作数据。<br>CSS：负责提供样式，对标签中的数据进行样式定义。<br>DOM：负责将标签及其内容解析，封装成对象，对象中具有属性和行为。<br>JavaScript：负责提供程序设计语言，对页面中的对象进行逻辑操作。  </p>
<h1 id="node接口的特性和方法"><a href="#node接口的特性和方法" class="headerlink" title="node接口的特性和方法"></a>node接口的特性和方法</h1><table>
<thead>
<tr>
<th>特性/方法</th>
<th>类型/返回类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>nodeName</td>
<td>String</td>
<td>节点的名字；根据节点的类型而定义</td>
</tr>
<tr>
<td>nodeValue</td>
<td>String</td>
<td>节点的值；根据节点的类型而定义</td>
</tr>
<tr>
<td>nodeType</td>
<td>Number</td>
<td>节点的类型常量值之一</td>
</tr>
<tr>
<td>nodeType</td>
<td>Number</td>
<td>节点的类型常量值之一</td>
</tr>
<tr>
<td>ownerDocument</td>
<td>Document</td>
<td>指向这个节点所属的文档</td>
</tr>
<tr>
<td>firstChild</td>
<td>Node</td>
<td>指向在childNodes列表中的第一个节点</td>
</tr>
<tr>
<td>lastChild</td>
<td>Node</td>
<td>指向在childNodes列表中的最后一个节点</td>
</tr>
<tr>
<td>childNodes</td>
<td>NodeList</td>
<td>所有子节点的列表</td>
</tr>
<tr>
<td>parentNode</td>
<td>Node</td>
<td>返回一个给定节点的父节点</td>
</tr>
<tr>
<td>previousSibling</td>
<td>Node</td>
<td>指向前一个兄弟节点；如果这个节点就是第一个兄弟节点，那么该值为null</td>
</tr>
<tr>
<td>nextSibling</td>
<td>Node</td>
<td>指向后一个兄弟节点；如果这个节点就是最后一个兄弟节点，那么该值为null</td>
</tr>
<tr>
<td>hasChildNodes()</td>
<td>Boolean</td>
<td>当childNodes包含一个或多个节点时，返回真</td>
</tr>
<tr>
<td>attributes</td>
<td>NamedNodeMap</td>
<td>包含了代表一个元素的特性的Attr对象；仅用于Element节点</td>
</tr>
<tr>
<td>appendChild(node)</td>
<td>Node</td>
<td>将node添加到childNodes的末尾</td>
</tr>
<tr>
<td>removeChild(node)</td>
<td>Node</td>
<td>从childNodes中删除node</td>
</tr>
<tr>
<td>replaceChild(newnode, oldnode)</td>
<td>Node</td>
<td>将childNodes中的oldnode替换成newnode</td>
</tr>
<tr>
<td>insertBefore(newnode, refnode)</td>
<td>Node</td>
<td>在childNodes中的refnode之前插入newnode</td>
</tr>
</tbody>
</table>
<h1 id="Document对象"><a href="#Document对象" class="headerlink" title="Document对象"></a>Document对象</h1><p>每个载入浏览器的 HTML 文档都会成为 Document 对象  </p>
<ul>
<li>常用属性<br>all[] 提供对文档中所有 HTML 元素的访问  FF不支持<br>forms[]返回对文档中所有 Form 对象引用<br>body  提供对 <body> 元素的直接访问  </body></li>
<li>常用方法<br>getElementById()返回对拥有指定 id 的第一个对象的引用<br>getElementsByName()返回带有指定名称的对象集合<br>getElementsByTagName()返回带有指定标签名的对象集合<br>write()向文档写 HTML 表达式 或 JavaScript 代码  </li>
</ul>
<h1 id="Element-对象"><a href="#Element-对象" class="headerlink" title="Element 对象"></a>Element 对象</h1><ul>
<li>操纵 Element 对象的属性(首先要获取到element)  <ul>
<li>获取属性：getAttribute(name)方法。</li>
<li>设置属性：setAttribute(name,value)方法。</li>
<li>删除属性：removeAttribute(name)方法。</li>
</ul>
</li>
<li>在 Element 对象中查找 Element 对象<br>在Element对象的范围内，可以用来查找其他节点的唯一有效方法就是getElementsByTagName()方法。而该方法返回的是一个集合</li>
</ul>
<h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><ul>
<li>nodeName<br>如果节点是元素节点，nodeName返回这个元素的名称(标签名)<br>如果是属性节点，nodeName返回这个属性的名称(属性名)<br>getAttributeNode<br>如果是文本节点，nodeName返回一个内容为#text 的字符串  </li>
<li>nodeType<br>Node.ELEMENT_NODE    —1    – 元素节点<br>Node.ATTRIBUTE_NODE  —2    – 属性节点<br>Node.TEXT_NODE       —3    – 文本节点  </li>
<li>nodeValue<br>如果给定节点是一个属性节点，返回值是这个属性的值<br>如果给定节点是一个文本节点，返回值是这个文本节点内容<br>如果给定节点是一个元素节点，返回值是 null  </li>
</ul>
<h1 id="父节点、子节点和同辈节点"><a href="#父节点、子节点和同辈节点" class="headerlink" title="父节点、子节点和同辈节点"></a>父节点、子节点和同辈节点</h1><ul>
<li>父节点： parentNode<br>parentNode 属性返回的节点永远是一个元素节点，因为只有元素节点才有可能包含子节点。<br>document 节点的没有父节点。  </li>
<li>子节点<br>children[index]:获取子节点<br>children：获取指定节点的所有子节点集合。<br>firstChild：获取指定节点的第一个子节点。<br>lastChild：获取指定节点的最后一个子节点。  </li>
<li>同辈节点<br>nextSibling: 返回一个给定节点的下一个兄弟节点。<br>previousSibling：返回一个给定节点的上一个兄弟节点。  </li>
</ul>
<p>节点属性(了解)<br>节点属性attributes是Node接口定义的属性。<br>节点属性attributes就是节点（特别是元素节点）的属性。<br>事实上，attributes中包含的是一个节点的所有属性的集合。<br>attributes.getNameItem()和Element对象的getAttribute()方法类似。  </p>
<h1 id="检测子节点和属性"><a href="#检测子节点和属性" class="headerlink" title="检测子节点和属性"></a>检测子节点和属性</h1><p>查看是否存在子节点： hasChildNodes()<br>查看是否存在属性：hasAttributes()<br>即使节点中没有定义属性，其attributes属性仍然有效的，而且长度值为0。同样节点中的childNodes属性也是如此。<br>当你想知道某个节点是否包含子节点和属性时，可以使用hasChildNodes()和hasAttributes()方法。但是，如果还想知道该节点中包含多少子节点和属性的话，仍要使用attributes和childNodes属性。<br>在IE浏览器中，不存在hasAttributes()方法！  </p>
<h1 id="操作-DOM-节点树"><a href="#操作-DOM-节点树" class="headerlink" title="操作 DOM 节点树"></a>操作 DOM 节点树</h1><ul>
<li>插入节点<br>appendChild()方法<br>insertBefore(newNode,oldNode)方法<br>没有insertAfter()方法  </li>
<li>删除节点：removeChild()方法</li>
<li>替换节点：replaceChild(newNode,oldNode)方法</li>
<li>复制节点：cloneNode(boolean)方法，其中，参数boolean是判断是否复制子节点。</li>
<li>移动节点：由以下三种方法组合完成<ul>
<li>查找节点：<br>getElementById()：通过节点的id属性，查找对应节点。<br>getElementsByName()：通过节点的name属性，查找对应节点。<br>getElementsByTagName()：通过节点名称，查找对应节点。  </li>
<li>插入节点：<br>appendChild()方法<br>insertBefore()方法  </li>
<li>替换节点：replaceChild()方法</li>
</ul>
</li>
</ul>
<h1 id="innerHTML属性"><a href="#innerHTML属性" class="headerlink" title="innerHTML属性"></a>innerHTML属性</h1><p>浏览器几乎都支持该属性，但不是 DOM 标准的组成部分。<br>innerHTML 属性可以用来读，写某给定元素里的 HTML 内容。<br>innerHTML 属性多与div或span标签配合使用。  </p>
<h1 id="HTML转移符"><a href="#HTML转移符" class="headerlink" title="HTML转移符"></a>HTML转移符</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&quot;        &amp;quot;  </div><div class="line">&apos;        &amp;apos;  </div><div class="line">&amp;        &amp;amp;  </div><div class="line">&lt;        &amp;lt;  </div><div class="line">&gt;        &amp;gt;  </div><div class="line">空格     &amp;nbsp;</div><div class="line">©        &amp;copy;</div></pre></td></tr></table></figure>
<h1 id="设置样式的两种方式"><a href="#设置样式的两种方式" class="headerlink" title="设置样式的两种方式"></a>设置样式的两种方式</h1><ul>
<li>className</li>
<li>style<ul>
<li>获取样式  <pre><code>DOM的style属性只能获取标签中使用style设置的样式，无法获取嵌入或外部样式  
style.cssText 获取style里面的字符串  
</code></pre></li>
<li>设置样式<pre><code>无论设置还是获取只能操作行内式。  
</code></pre></li>
</ul>
<ol>
<li>样式少的时候使用</li>
<li>style是对象（其他大部分是字符串）</li>
<li>值是字符串，没有设置值是“”；</li>
<li>命名规则，驼峰命名。和css不一样</li>
<li>设置了类样式不能获取。（只和行内式交互，和内嵌和外链无关）</li>
<li>box.style.cssText = “字符串形式的样式”；<br>backgroundColor<br>backgroundImage<br>color<br>width<br>height<br>border<br>opacity (IE8以前filter: alpha(opacity=xx))<br>注意DOM对象style的属性和标签中style内的值不一样，因为在JS中-不能作为标识符<br>backgroundColor       DOM中<br>background-color    CSS中  </li>
</ol>
</li>
</ul>
<h1 id="动态创建表格"><a href="#动态创建表格" class="headerlink" title="动态创建表格"></a>动态创建表格</h1><ul>
<li>方式1<br>createElement()</li>
<li>方式2<br>rows                          (只读，table和textarea能用)<br>insertRow()              (只有table能调用)<br>deleteRow()              (只有table能调用)<br>cells                  (只读，table和textarea能用)<br>insertCell()               (只有tr能调用)<br>deleteCell()              (只有tr能调用)  </li>
</ul>
<h1 id="增-删-改-查"><a href="#增-删-改-查" class="headerlink" title="增 删 改 查"></a>增 删 改 查</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><p>document.createElement<br>appendChild  </p>
<h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><p>removeChild  </p>
<h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><p>style<br>id<br>className<br>innerHTML<br>innerText  </p>
<h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><p>getElementById<br>getElementsByTagName<br>getELementsByClassName  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DOM（文档对象模型）&quot;&gt;&lt;a href=&quot;#DOM（文档对象模型）&quot; class=&quot;headerlink&quot; title=&quot;DOM（文档对象模型）&quot;&gt;&lt;/a&gt;DOM（文档对象模型）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;文档：标记型文档&lt;/li&gt;
&lt;li&gt;对象：封装了属性和行
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>01_JS类型</title>
    <link href="http://yoursite.com/2017/05/21/Frontend/JavaScript/01_JS%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/05/21/Frontend/JavaScript/01_JS类型/</id>
    <published>2017-05-20T16:18:56.000Z</published>
    <updated>2017-05-20T16:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h1><ul>
<li>ECMAScript<br>JavaScript的语法规范  </li>
<li>DOM<br>JavaScript操作网页上元素的API  </li>
<li>BOM<br>JavaScript操作浏览器部分功能的API  </li>
</ul>
<p>关键字：<br>break case catch continue debugger default delete do else finally for function if in instanceof new return switch this throw try typeof var void while with  </p>
<p>保留字：<br>abstract boolean byte char class const debugger double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile</p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>var 变量名 = 值;</p>
<ol>
<li>变量的声明用var</li>
<li>变量的命名：英文，数字，_，$，数字不能在名称开头。</li>
<li>变量的名称不能是关键字。</li>
</ol>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>简单类型：</p>
<ul>
<li>数值类型(number)</li>
<li>布尔类型(boolean)</li>
<li>字符串类型(string)</li>
<li>未定义类型(undefined)</li>
<li>null类型(本质上是一个特殊的object)</li>
</ul>
<p>复杂类型：</p>
<ul>
<li>object类型(引用类型)</li>
<li>function类型(函数类型)</li>
</ul>
<h2 id="number："><a href="#number：" class="headerlink" title="number："></a>number：</h2><p>在number的世界中数字分为两一种  </p>
<ol>
<li>number </li>
<li>NaN(表示的数字的一种不正常的状态：在计算过程出现错误)</li>
</ol>
<blockquote>
<p>正数，负数，小数，0<br>注意：js中对数值没有明确的细分，所有的数值都叫nubmer</p>
</blockquote>
<p><strong>NaN: Not a Number(非数字)</strong><br>当我们在进行运算的时候，出现错误，NaN就是用来表示这个错误。本质上是一个数字。<br>如何判断数据是否是NaN:<br><code>IsNaN();</code><br>用于判断当前变量是否是一个非数字，如果是一个非数字，那么为true,如果是一个数字，那么为false.  </p>
<blockquote>
<p>注意：NaN是一种很特殊的状态，特殊到它自己都不等于自己。</p>
</blockquote>
<p>浮点数<br>var n = 5e-324;<br>浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数<br> var result = 0.1 + 0.2; // 结果不是 0.3，而是：0.30000000000000004<br> console.log(0.07 <em> 100);<br><em>*永远不要测试某个特定的浮点数值(不要判断两个浮点数是否相等)</em></em>  </p>
<p>由于内存的限制，ECMAScript 并不能保存世界上所有的数值<br>最小值：Number.MIN_VALUE，这个值为： 5e-324<br>最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308<br>无穷大：Infinity<br>无穷小：-Infinity  </p>
<h2 id="boolean"><a href="#boolean" class="headerlink" title="boolean:"></a>boolean:</h2><p>Boolean类型有两个字面量：true和false，并且区分大小写！<br>虽然Boolean 类型的字面值只有两个，但 ECMAScript 中所有类型的值都有与这两个 Boolean 值等价的值  </p>
<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><ol>
<li>string可以用双引号引起来，也可以用单引号，但单引号和双引号要成对出现</li>
<li>如果要在字符串中输出引号，可以使用转译符“\”;</li>
<li>字符串是由一个一个字符组成的，获取一个字符串中字符的个数可以使用length</li>
</ol>
<h2 id="undefined-未定义："><a href="#undefined-未定义：" class="headerlink" title="undefined:未定义："></a>undefined:未定义：</h2><p>Undefined这是一种比较特殊的类型，表示变量未赋值，这种类型只有一种值就是undefined<br>undefined是Undefined类型的字面量<br>一般出现在声明了一个变量，但是没有赋值。</p>
<h2 id="null-Null类型"><a href="#null-Null类型" class="headerlink" title="null(Null类型)"></a>null(Null类型)</h2><p>alert(typeof null);//输出的是object 。null被认为是对象的占位符，但仍然算做原始数据类型  </p>
<blockquote>
<p>注释：您也许会问，为什么 typeof 运算符对于 null 值会返回 “Object”。这实际上是 JavaScript 最初实现中的一个错误，然后被 ECMAScript 沿用了。现在，null 被认为是对象的占位符，从而解释了这一矛盾，但从技术上来说，它仍然是原始值。<br>这里需要注意的是：</p>
</blockquote>
<p>另一种只有一个值的类型是 Null，它只有一个专用值 null，即它的字面量。值 undefined 实际上是从值 null 派生来的，因此 ECMAScript 把它们定义为相等的。<br>alert(null == undefined);  //输出 “true”<br>尽管这两个值相等，但它们的含义不同。undefined 是声明了变量但未对其初始化时赋予该变量的值，null 则用于表示尚未存在的对象（在讨论 typeof 运算符时，简单地介绍过这一点）。如果函数或方法要返回的是对象，那么找不到该对象时，返回的通常是 null。  </p>
<p>Null类型（空型）只有一个值就是：null。  </p>
<p>undefined实际上是从值null派生来的，所以显示true  </p>
<p>undefined是声明了变量但是未赋值，null是找不到对象。  </p>
<h2 id="得到数据的类型"><a href="#得到数据的类型" class="headerlink" title="得到数据的类型"></a>得到数据的类型</h2><p>typeof(变量); //得到数据的类型<br>typeof 变量; //在js的代码系统已经使用了这个字符串</p>
<h1 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h1><h2 id="强制转换："><a href="#强制转换：" class="headerlink" title="强制转换："></a>强制转换：</h2><h3 id="转换成数值类型"><a href="#转换成数值类型" class="headerlink" title="转换成数值类型"></a>转换成数值类型</h3><p>三个把值转换成数值类型的函数：Number()、 parseInt()、 parseFloat()  </p>
<ol>
<li><p>Number()可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回NaN</p>
</li>
<li><p>parseInt()把字符串转换成整数<br>parseInt()可以传递两个参数，第一个参数是要转换的字符串，第二个参数是要转换的进制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var num1 = parseInt(&quot;12.3abc&quot;);  //返回12，如果第一个字符是数字会解析知道遇到非数字结束</div><div class="line">var num2 = parseInt(&quot;abc123&quot;);  //返回NaN，如果第一个字符不是数字或者符号就返回NaN</div><div class="line">var num3 = parseInt(&quot;&quot;);        //空字符串返回NaN，Number(&quot;&quot;)返回0</div><div class="line">var num5 = parseInt(&quot;10&quot;);      //返回10</div><div class="line">var num4 = parseInt(&quot;0xA&quot;);     //返回10</div><div class="line">var num1 = parseInt(&quot;A&quot;,16);   //A按16进制解析是10</div><div class="line">var num2 = parseInt(&quot;10&quot;,10);  //10按10进制解析10</div><div class="line">var num3 = parseInt(&quot;10&quot;,16);  //10按16进制解析16</div><div class="line">var num4 = parseInt(&quot;10&quot;,8);   //10按8进制解析是8</div><div class="line">var num5 = parseInt(&quot;10&quot;,2);   //10按2进制解析是2</div><div class="line">var num6 = parseInt(&quot;10&quot;,3);   //10按3进制解析是3</div></pre></td></tr></table></figure>
</li>
<li><p>parseFloat()把字符串转换成浮点数<br>parseFloat()和parseInt非常相似，不同之处在与<br>parseFloat会解析第一个. 遇到第二个.或者非数字结束<br>parseFloat不支持第二个参数，只能解析10进制数<br>如果解析的内容里只有整数，解析成整数  </p>
</li>
</ol>
<blockquote>
<p>注意：parseInt在转换字符串的时候：</p>
<ol>
<li>如果使用Number转换非数字类型的字符串，那么转换失败，但是用parseInt转换就不会，如果数据中既有数字又有字母，那么parseInt会将数字转成Number,后面的字母（就算字母后面有数字也会）直接去掉。</li>
<li>如果在转换的字符串前面有空格，空格会自动去掉。</li>
<li>如果字符串开头不是数字，那么这个转换结果还是会报错。  </li>
</ol>
</blockquote>
<h3 id="转成字符串："><a href="#转成字符串：" class="headerlink" title="转成字符串："></a>转成字符串：</h3><ol>
<li><p>几乎每一个值都有toString()方法<br>数值类型的toString()，可以携带一个参数，输出对应进制的值  </p>
</li>
<li><p>String()函数<br>String()函数存在的意义：有些值没有toString()，这个时候可以使用String()。比如：undefined和null<br>var a = 123;<br>var b = String(a);<br>console.log(typeof(b));  </p>
</li>
</ol>
<h3 id="将其它类型转成布尔类型"><a href="#将其它类型转成布尔类型" class="headerlink" title="将其它类型转成布尔类型:"></a>将其它类型转成布尔类型:</h3><ol>
<li>Boolean()函数<br>var a = 123;<br>var b = Boolean(a);<br>console.log(typeof(b));  </li>
<li>流程控制语句会把后面的值隐式转换成布尔类型</li>
</ol>
<p>boolean可以将任意的内容转成boolean类型<br>转换为false的值：false、””、0和NaN、null、undefined  </p>
<h2 id="隐式转换（自动转换）"><a href="#隐式转换（自动转换）" class="headerlink" title="隐式转换（自动转换）"></a>隐式转换（自动转换）</h2><ol>
<li><p>将字符串转成number<br>var a = “123”;<br>var b = +a;<br>console.log(b); //123<br>console.log(typeof(b)); //number  </p>
</li>
<li><p>将数字转成字符串<br>var a = 123;<br>var b = a + “”;<br>console.log(b);<br>console.log(typeof(b));  </p>
</li>
<li><p>将其他类型转成boolean类型：<br>var a = “abc”;<br>var b = !a;<br>console.log(b);<br>console.log(typeof(b));  </p>
</li>
</ol>
<h1 id="比较运算符："><a href="#比较运算符：" class="headerlink" title="比较运算符："></a>比较运算符：</h1><p><code>&gt; &lt; &gt;= &lt;= !=</code><br>var a =  1 &gt; 3;  </p>
<blockquote>
<p>注意：比较运算符的优先级要高于赋值运算符的优先级。</p>
</blockquote>
<h1 id="数值运算符（算数运算符）："><a href="#数值运算符（算数运算符）：" class="headerlink" title="数值运算符（算数运算符）："></a>数值运算符（算数运算符）：</h1><p><code>+</code>  </p>
<ol>
<li>如果有字符串是相连</li>
<li>如果都是number是相加  </li>
</ol>
<p><code>-</code><br>减法不会用在字符串之间，只会用在数值之间<br>如果字符串可以转换为数值，则也是数值相减<br>作用只是一个数据减去另一个数。  </p>
<p><code>*</code><br>作用于两个数据之间：一个数乘以另一个数  </p>
<p><code>/</code><br> 作用于两个数据之间：一个数除以另一个数  </p>
<p><code>%</code>:<br>计算出两个数据相除以后余数：<br>得到一个数余以另一个数的余数  </p>
<p><code>()</code><br>将括号内的内容当作一个整体在编程没有中括号，也没有大括号。</p>
<h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>或<code>||</code><br>与<code>&amp;&amp;</code><br>非<code>!</code></p>
<h1 id="等号运算符"><a href="#等号运算符" class="headerlink" title="等号运算符"></a>等号运算符</h1><p>== 等于     比较的是内容，并不关心数据类型<br>=== 全等   比较的是内容以及数据类型。<br>!= 不等于  比较的是内容，并不关心数据类型<br>!== 不全等于 比较的是内容和数据类型, 其中之一不一样就为true  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript的组成&quot;&gt;&lt;a href=&quot;#JavaScript的组成&quot; class=&quot;headerlink&quot; title=&quot;JavaScript的组成&quot;&gt;&lt;/a&gt;JavaScript的组成&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;ECMAScript&lt;br&gt;JavaSc
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>08_JS_offset</title>
    <link href="http://yoursite.com/2017/05/21/Frontend/JavaScript/08_JS_offset/"/>
    <id>http://yoursite.com/2017/05/21/Frontend/JavaScript/08_JS_offset/</id>
    <published>2017-05-20T16:18:56.000Z</published>
    <updated>2017-05-20T16:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h1><p>三大家族（offset/scroll/client）<br>事件对象/event   （事件被触动时，鼠标和键盘的状态）（通过属性控制）  </p>
<p>offset这个单词本身是–偏移，补偿，位移的意思。<br>js中有一套方便的获取元素尺寸的办法就是offset家族；<br>offsetWidth和offsetHight 以及offsetLeft和offsetTop以及offsetParent<br>共同组成了offset家族。  </p>
<h2 id="offsetWidth和offsetHight-（检测盒子自身宽高-padding-border）"><a href="#offsetWidth和offsetHight-（检测盒子自身宽高-padding-border）" class="headerlink" title="offsetWidth和offsetHight （检测盒子自身宽高+padding+border）"></a>offsetWidth和offsetHight （检测盒子自身宽高+padding+border）</h2><p>这两个属性，他们绑定在了所有的节点元素上。获取之后，只要调用这两个属性，我们就能够获取元素节点的宽和高。<br>offset宽/高  =  盒子自身的宽/高 + padding +border；<br>offsetWidth = width+padding+border；<br>offsetHeight = height+padding+border；  </p>
<h2 id="offsetLeft和offsetTop-（检测距离父盒子有定位的左-上面的距离）"><a href="#offsetLeft和offsetTop-（检测距离父盒子有定位的左-上面的距离）" class="headerlink" title="offsetLeft和offsetTop  （检测距离父盒子有定位的左/上面的距离）"></a>offsetLeft和offsetTop  （检测距离父盒子有定位的左/上面的距离）</h2><p>返回距离上级盒子（带有定位）左边s的位置<br>如果父级都没有定位则以body为准<br>offsetLeft 从父亲的padding 开始算,父亲的border 不算。<br>在父盒子有定位的情况下，offsetLeft == style.left(去掉px)  </p>
<h2 id="offsetParent-（检测父系盒子中带有定位的父盒子节点）"><a href="#offsetParent-（检测父系盒子中带有定位的父盒子节点）" class="headerlink" title="offsetParent  （检测父系盒子中带有定位的父盒子节点）"></a>offsetParent  （检测父系盒子中带有定位的父盒子节点）</h2><ol>
<li><p>返回该对象的（带有定位）父级<br>如果当前元素的父级元素没有进行CSS定位（position为absolute或relative，fixed），offsetParent为body。  </p>
</li>
<li><p>如果当前元素的父级元素中有CSS定位 （position为absolute或relative，fixed），    offsetParent取最近的那个父级元素。</p>
</li>
</ol>
<h2 id="offsetLeft和style-left区别"><a href="#offsetLeft和style-left区别" class="headerlink" title="offsetLeft和style.left区别"></a>offsetLeft和style.left区别</h2><ol>
<li>最大区别在于offsetLeft可以返回没有定位盒子的距离左侧的位置。而 style.left不可以</li>
<li>offsetTop 返回的是数字，而 style.top 返回的是字符串，除了数字外还带有单位：px。</li>
<li>offsetTop 只读，而 style.top 可读写。（只读是获取值，可写是赋值）</li>
<li>如果没有给 HTML 元素指定过 top 样式，则style.top 返回的是空字符串。</li>
</ol>
<p>style.left在=的左边和右边还不一样。（左边的时候是属性，右边的时候是值）</p>
<h1 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h1><p>scroll这个单词本身是–卷页，卷曲的意思。  </p>
<ol>
<li>scrollWidth/scrollHeight 内容的宽高<br>IE67可以比盒子小。 IE8+火狐谷歌不能比盒子小<br>scrollWidth和scrollHeight不包括border和margin<br>scrollWidth = width + padding;  </li>
</ol>
<blockquote>
<p>高度有一个特点：如果文字超出了盒子，高度为超出盒子的内容的高。不超出是盒子本身高度<br>IE8以下，不包括IE8为盒子本身内容的多少。  </p>
</blockquote>
<ol>
<li>scrollLeft/scrollTop<br>被卷去的左侧和头部（浏览器无法显示的左/头部）<br>一般调用document.body.scrollTop:  </li>
</ol>
<h2 id="onscroll-滚动事件-window-onscroll-fun…"><a href="#onscroll-滚动事件-window-onscroll-fun…" class="headerlink" title="onscroll 滚动事件(window.onscroll = fun…)"></a>onscroll 滚动事件(window.onscroll = fun…)</h2><p>屏幕每滚动一次，哪怕只有1像素都会触发这个事件。这样就可以用来检测屏幕滚动了。<br>只能有一个写了多个以最后一个为准，同理 window.onload  </p>
<h2 id="兼容问题"><a href="#兼容问题" class="headerlink" title="兼容问题"></a>兼容问题</h2><ul>
<li>未声明 DTD（谷歌只认识他）（IE9+认识他）document.body.scrollTop</li>
<li>已经声明DTD（IE678只认识他）(IE9+任何时候)<br> document.documentElement.scrollTop</li>
<li>火狐/谷歌/ie9+以上支持的(不管DTD)<br> window.pageYOffset</li>
</ul>
<h2 id="Html基本结构访问方法"><a href="#Html基本结构访问方法" class="headerlink" title="Html基本结构访问方法"></a>Html基本结构访问方法</h2><p>获取title、body、head、html标签<br>document.title — 文档标题；<br>document.head — 文档的头标签<br>document.body — 文档的body标签；<br>document.documentElement — 这个很重要<br>它表示文档的html标签， 也就是说，基本结构当中的html标签并不是通过document.html 去访问的，而是document.documentElement 。  </p>
<h2 id="简单写"><a href="#简单写" class="headerlink" title="简单写"></a>简单写</h2><p>为了兼容，不管有没有 DTD，可以使用如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var scrollTop = window.pageYOffset</div><div class="line">                || document.documentElement.scrollTop  </div><div class="line">                || document.body.scrollTop；  </div><div class="line">或者：</div><div class="line">var scrollTop =  document.documentElement.scrollTop  </div><div class="line">                + document.body.scrollTop；</div></pre></td></tr></table></figure></p>
<h1 id="事件对象（event）"><a href="#事件对象（event）" class="headerlink" title="事件对象（event）"></a>事件对象（event）</h1><p>再触发DOM上的某个事件时，会产生一个事件对象event，这个对象中包含着所有与事件有关的信息。所有浏览器都支持event对象，但支持的方式不同。<br>比如鼠标操作时候，会添加鼠标位置的相关信息到事件对象中。（类似Date）<br>普通浏览器支持 event（带参，任意参数）<br>ie 678 支持 window.event（无参，内置）<br>总结：他是一个事件中的内置对象。内部装了很多关于鼠标和事件本身的信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">box.onclick = function(  event||asdf  )&#123;</div><div class="line">	event||asdf对时间对象event的操作</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="事件对象的获取（event的获取）"><a href="#事件对象的获取（event的获取）" class="headerlink" title="事件对象的获取（event的获取）"></a>事件对象的获取（event的获取）</h2><p>IE678中，window.event<br>在火狐谷歌中，event或者，在事件绑定的函数中，加参，这个参数就是event.<br>Box.onclick = function (aaa){   aaa就是event     }</p>
<h2 id="兼容获取方式有两种："><a href="#兼容获取方式有两种：" class="headerlink" title="兼容获取方式有两种："></a>兼容获取方式有两种：</h2><p>不写参数直接使用event;<br>写参数，但是为var event  = event || window.event;(主要用这种)  </p>
<h2 id="event内容"><a href="#event内容" class="headerlink" title="event内容"></a>event内容</h2><h2 id="screenX、pageX和clientX的区别"><a href="#screenX、pageX和clientX的区别" class="headerlink" title="screenX、pageX和clientX的区别"></a>screenX、pageX和clientX的区别</h2><p>PageY/pageX: 鼠标位于整个网页页面的顶部和左侧部分的距离。（页面）<br>ScreenY/screenX: 鼠标位于屏幕的上方和左侧的距离。（屏幕）<br>ClientX/clientY: 鼠标位于浏览器的左侧和顶部的距离。（浏览器大小和位置）</p>
<h2 id="PageY和pageX的兼容写法"><a href="#PageY和pageX的兼容写法" class="headerlink" title="PageY和pageX的兼容写法"></a>PageY和pageX的兼容写法</h2><p>在页面位置就等于 = 看得见的+看不见的<br><strong>pageY/pageX=event.clientY/clientX+scroll().top/scroll().left</strong></p>
<h2 id="清除选中的内容"><a href="#清除选中的内容" class="headerlink" title="清除选中的内容"></a>清除选中的内容</h2><p><code>window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();</code><br>　<br>IE9、Firefox、Safari、Chrome和Opera支持：window.getSelection()<br>IE9以下支持：document.selection  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;offset&quot;&gt;&lt;a href=&quot;#offset&quot; class=&quot;headerlink&quot; title=&quot;offset&quot;&gt;&lt;/a&gt;offset&lt;/h1&gt;&lt;p&gt;三大家族（offset/scroll/client）&lt;br&gt;事件对象/event   （事件被触动时，鼠标和
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>01_vim的初级使用</title>
    <link href="http://yoursite.com/2017/05/14/Linux/vim/"/>
    <id>http://yoursite.com/2017/05/14/Linux/vim/</id>
    <published>2017-05-14T05:46:07.000Z</published>
    <updated>2017-05-14T05:46:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim的初级使用"><a href="#vim的初级使用" class="headerlink" title="vim的初级使用"></a>vim的初级使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>of linux<br>sudo apt install vim<br>ps：如果安装失败就修复一下sudo apt -f install  </p>
</li>
<li><p>of windows<br>在cmd里面使用vim需要加环境变量<br>加入到path路径里面就可以，安装完了叫做GVim  </p>
</li>
</ol>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>vim一共有三个模式  </p>
<ul>
<li>一般模式 //直接进去就是一般模式</li>
<li>编辑模式 //就是insert模式和visual模式</li>
<li>命令模式 //Shift + ;进入命令模式，就是输入一个引号。</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>在cmd或者终端里键入vim your_file_name：打开编辑your_file_name的文件，没有的话就创建一个名字为your_file_name的文件<br>直接键入vim也会打开，也可以编辑，只不过保存的时候要加文件名， :w your_file_name  </p>
<h3 id="在一般模式下"><a href="#在一般模式下" class="headerlink" title="在一般模式下"></a>在一般模式下</h3><p>i：在当前光标处进入insert模式<br>a：在当前光标的下一个位置进入insert模式<br>Shift + a：在当前光标的行的末尾进入insert模式<br>o：在当前光标的开一行并进入insert模式  </p>
<p>x：删除当前光标的字符<br>r：替换当前光标的字符，需要继续输入一个<br>v：在当前国标处进入visual模式<br>p：在当前光标的位置向后复制  </p>
<p>h：光标向左一位<br>j：光标向下一行<br>k：光标向上一行<br>l：光标向右一位  </p>
<p>dw：剪切/删除当前光标所在的单词<br>dd：剪切/删除当前光标所在的一行  </p>
<p>yw：复制当前光标所在的单词<br>yy：复制当前光标所在的一行  </p>
<p>u：后撤一步操作<br>Ctrl + r：向前一步操作，取消你的后撤操作  </p>
<p>Shift + g：直接跳到最后一行<br>3 Shift + g：调到第三行，可以换成别的数字  </p>
<h3 id="在visual模式下"><a href="#在visual模式下" class="headerlink" title="在visual模式下"></a>在visual模式下</h3><p>用于块操作</p>
<p>h：光标向左一位<br>j：光标向下一行<br>k：光标向上一行<br>l：光标向右一位<br>d：剪切目前所选择的部分<br>y：复制目前所选择的部分<br>p：在当前光标的位置向后复制</p>
<h3 id="在visual模式下-1"><a href="#在visual模式下-1" class="headerlink" title="在visual模式下"></a>在visual模式下</h3><p>用于块操作  </p>
<p>h：光标向左一位<br>j：光标向下一行<br>k：光标向上一行<br>l：光标向右一位<br>d：剪切目前所选择的部分<br>y：复制目前所选择的部分<br>p：在当前光标的位置向后复制  </p>
<h3 id="在命令模式下"><a href="#在命令模式下" class="headerlink" title="在命令模式下"></a>在命令模式下</h3><p>Shift + ;进入命令模式，就是输入一个引号。  </p>
<p>:q 退出vim，没有保存不能退出<br>:q! 强制退出vim，不会保存修改  </p>
<p>:w 保存文件<br>:w! 强制保存，并不知道有什么用o(^▽^)o<br>:w your_file_name 将文件保存为。。。  </p>
<p>:wq 保存并推出  </p>
<p>:e your_file_name 编辑，其实并用不到  </p>
<p>:/ words 查找“word”，查找你需要的文本，用n查询下一个<br>:%s/Gavin/ruozha 将全文中的第一个Gavin替换成ruozha<br>:%s/Gavin/ruozha/g 将全文中所有的Gavin替换成ruozha  </p>
<h3 id="一些杂项"><a href="#一些杂项" class="headerlink" title="一些杂项"></a>一些杂项</h3><p>在vim编辑中，原来喜欢用Ctrl + s的同学可能会按了一下，vim他就死了，怎么弄都没有反应，原来这个快捷键是linux的快捷键，作用是锁定终端的快捷键，解锁只需要按Ctrl + q就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vim的初级使用&quot;&gt;&lt;a href=&quot;#vim的初级使用&quot; class=&quot;headerlink&quot; title=&quot;vim的初级使用&quot;&gt;&lt;/a&gt;vim的初级使用&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="vim" scheme="http://yoursite.com/categories/Linux/vim/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局</title>
    <link href="http://yoursite.com/2017/05/14/Frontend/CSS/Flex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2017/05/14/Frontend/CSS/Flex布局/</id>
    <published>2017-05-14T05:46:07.000Z</published>
    <updated>2017-05-14T05:46:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h1><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>Flexbox 布局（也叫Flex布局，弹性盒子布局）目标在于提供一个更有效地布局、对齐方式，<br>并且能够使 父元素 在 子元素的大小未知 或 动态变化 情况下仍然能够 分配好子元素之间的间隙。  </p>
<p>Flex布局的主要思想是使 父元素 能够调节 子元素的高度、 宽度 和 排布的顺序，<br>从而能够最好地适应可用布局空间（能够适应不同的设备和不同大小的屏幕）。<br>设定为flex布局的元素能够放大子元素使之尽可能填充可用空间，也可以收缩子元素使之不溢出。</p>
<p>与传统布局中块状元素按照垂直方向摆放，行内元素按照水平方向摆放相比，<br>flex布局是无方向的。<br>传统布局在应对大型复杂的布局时缺乏灵活性，特别是在改变方向、改变大小、伸展、收缩等等方面。</p>
<blockquote>
<p>注: Flex 布局比较适合小规模的布局，Gird布局面向更大规模的布局。</p>
</blockquote>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Flex布局是一个完整的模块而不是一个单独的属性，它包括了完整的一套属性。<br>其中有的属性是设置在容器（container，也可以叫做父元素，称为flex container）上，有的则是设置在容器的项目上（item，也可以叫做子元素，称为flex items）上。  </p>
<p><img src="http://i.imgur.com/6peziD0.png" alt=""><br><img src="http://i.imgur.com/DicVmyr.png" alt="">  </p>
<p>如果我们可以说传统布局是建立在块状元素垂直流和行内元素水平流上的，<br>那么flex布局就是建立在“flex-flow方向”上的，通过下图解释flex布局的主要思想。  </p>
<p><img src="http://i.imgur.com/ZcshJnZ.png" alt=""></p>
<p>在flex布局中，子元素要么按照主轴也就是main axis（从main-start到main-end）排布，<br>要么按照交叉轴，也就是cross axis(从cross-start到cross-end)排布。  </p>
<p>下面介绍几个概念：  </p>
<ul>
<li>main axis: Flex 父元素的主轴是指子元素布局的主要方向轴，注意主轴不一定是水平的，它由属性flex-direction来确定主轴是水平还是垂直的（后面会介绍）。</li>
<li>main-start|main-end: 分别表示主轴的开始和结束，子元素在父元素中会沿着主轴从main-start到main-end排布。</li>
<li>main size: 单个项目占据主轴的长度大小。</li>
<li>cross axis: 交叉轴，与主轴垂直。</li>
<li>cross-start|cross-end: 分别表示交叉轴的开始和结束。子元素在交叉轴的排布从cross-start开始到cross-end。</li>
<li>cross size: 子元素在交叉轴方向上的大小。</li>
</ul>
<h1 id="属性介绍"><a href="#属性介绍" class="headerlink" title="属性介绍"></a>属性介绍</h1><p>属性分作用于父元素的属性和作用于子元素的属性两部分介绍。</p>
<h2 id="父元素属性"><a href="#父元素属性" class="headerlink" title="父元素属性"></a>父元素属性</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>用来定义父元素是一个 flex布局容器。<br>如果设置为flex则父元素为块状元素，设置为inline-flex父元素呈现为行内元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">  display: flex; /* or inline-flex */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p><img src="http://i.imgur.com/y6XsaVw.png" alt=""></p>
<p>flex-direction定义flex布局的主轴方向。<br>flex布局是单方向布局，子元素主要沿着水平行或者垂直列布局。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">  flex-direction: row | row-reverse | column | column-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>row: 行方向，flex-direction的默认值，在ltr(left to right， 从左到右)排版方式下从左到右排列，在rtl(right to left， 从右到左)排版方式下从右到左排列。</li>
<li>row-reverse: 行反方向，在ltr中从右向左，在rtl中从左到右。</li>
<li>column: 列方向，与row相似，只是从上到下。</li>
<li>column-reverse: 列反方向，与row-reverse相似，只是从下到上。</li>
</ul>
<h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p><img src="http://i.imgur.com/FZygWZ7.png" alt="">  </p>
<p>默认情况下，flex布局中父元素会把子元素尽可能地排在同一行，通过设置flex-wrap来决定是否允许子元素这行排列。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container&#123;</div><div class="line">  flex-wrap: nowrap | wrap | wrap-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>nowrap: 不折行，默认值，所有的子元素会排在一行。</li>
<li>wrap: 折行，子元素会从上到下根据需求折成多行。</li>
<li>wrap-reverse: 从下向上折行，子元素会从下到上根据需求折成多行。</li>
</ul>
<h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>flex-flow是flex-direction和flex-wrap属性的缩写形式。默认值是row,nowrap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flex-flow: &lt;‘flex-direction’&gt; || &lt;‘flex-wrap’&gt;</div></pre></td></tr></table></figure></p>
<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p><img src="http://i.imgur.com/iUBgaIu.png" alt="">  </p>
<p>justify-content属性定义了子元素沿主轴方向的对齐方式，<br>用来当子元素大小最大的时候，分配主轴上的剩余空间。也可以当子元素超出主轴的时候用来控制子元素的对齐方式。  </p>
<ul>
<li>flex-start: 默认值，朝主轴开始的方向对齐。</li>
<li>flex-end: 朝主轴结束的方向对齐。</li>
<li>center: 沿主轴方向居中。</li>
<li>space-between: 沿主轴两端对齐，第一个子元素在主轴起点，最后一个子元素在主轴终点。</li>
<li>space-around: 沿主轴子元素之间均匀分布。要注意的是子元素看起来间隙是不均匀的，第一个子元素和最后一个子元素离父元素的边缘有一个单位的间隙，但两个子元素之间有两个单位的间隙，因为每个子元素的两侧都有一个单位的间隙。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">  justify-content: flex-start | flex-end | center | space-between | space-around;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p><img src="http://i.imgur.com/Uy6h4oa.png" alt="">  </p>
<p>align-items定义了子元素在交叉轴方向的对齐方向，这是在每个子元素仍然在其原来所在行的基础上所说的。可以看作是交叉轴上的justify-content属性;  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">  align-items: flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>flex-start: 按照交叉轴的起点对齐。</li>
<li>flex-end: 按照交叉轴的终点对齐。</li>
<li>center: 沿交叉轴方向居中。</li>
<li>baseline: 按照项目的第一行文字的基线对齐。</li>
<li>stretch: 默认值，在满足子项目所设置的min-height、max-height、height的情况下拉伸子元素使之填充整个父元素。</li>
</ul>
<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p><img src="http://i.imgur.com/1ph6EH2.png" alt="">  </p>
<p>align-content是当父元素所包含的行在交叉轴方向有空余部分时如何分配空间。与justify-content在主轴上如何对单个子元素对齐很相似。  </p>
<blockquote>
<p>注意：当只有一行的时候，该属性并不起作用。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">  align-content: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注：该属性中的六个属性值与justify-content中的六个属性意思相似，不同之处在于justify-content沿主轴方向的作用于单个子元素，而align-content沿交叉轴方向作用于行。遂不再赘述各属性值含义。</p>
<p>注：注意align-items和align-content的区别，前者是指在单行内的子元素对齐方式，后者是指多行之间的对齐方式。</p>
</blockquote>
<h3 id="父元素属性总结"><a href="#父元素属性总结" class="headerlink" title="父元素属性总结"></a>父元素属性总结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">display: flex|inline-flex;</div><div class="line">flex-direction: row | row-reverse | column | column-reverse;</div><div class="line">flex-wrap: nowrap | wrap | wrap-reverse;</div><div class="line">flex-flow: &lt;‘flex-direction’&gt; || &lt;‘flex-wrap’&gt;;</div><div class="line">justify-content: flex-start | flex-end | center | space-between | space-around;</div><div class="line">align-items: flex-start | flex-end | center | baseline | stretch;</div><div class="line">align-content: flex-start | flex-end | center | space-between | space-around | stretch;</div></pre></td></tr></table></figure>
<h2 id="子元素属性"><a href="#子元素属性" class="headerlink" title="子元素属性"></a>子元素属性</h2><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p><img src="http://i.imgur.com/zXXrdvK.png" alt="">  </p>
<p>默认情况下，子元素按照代码书写的先后顺序布局，但order属性可以更改子元素出现的顺序。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  order: &lt;integer&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注：order的默认值为0;子元素的order值越小，布局越排在前面，参考例图理解。  </p>
</blockquote>
<h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p><img src="http://i.imgur.com/6G3S8IL.png" alt="">  </p>
<p>flex-grow规定在空间允许的情况下，子元素如何按照比例分配可用剩余空间。如果所有的子元素的属性都设定为1，则父元素中的剩余空间会等分给所有子元素。如果其中某个子元素的flex-grow设定为2，则在分配剩余空间时该子元素将获得其他元素二倍的空间（至少会尽力获得）。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  flex-grow: &lt;number&gt;; /* default 0 */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注：flex-grow不接受负值。默认值为0，意味着即使有剩余空间，各子元素也不会放大。</p>
</blockquote>
<h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>与flex-grow属性类似，flex-shrink定义了空间不足时项目的缩小比例。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  flex-shrink: &lt;number&gt;; /* default 1 */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注： flex-shrink不接受负值。<br>flex-shrink默认值为1， 当所有子元素都为默认值时，则空间不足时子元素会同比例缩小。如果其中某个子元素的flex-shrink值为0，则空间不足时该子元素并不会缩小。如果其中某个子元素的flex-shrink值为2时，则空间不足时该子元素会以二倍速度缩小。  </p>
</blockquote>
<h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>flex-basis定义了在计算剩余空间之前子元素默认的大小。<br>可以设置为某个长度（e.g. 20%, 5rem, etc.）或者关键字。关键字auto意味着子元素会按照其本来的大小显示。<br>关键字content意味着根据内容来确定大小——这个关键字到目前没有被很好地支持，所以测试起来比较困难，与content的类似的关键字还有max-content, min-content, fit-content。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  flex-basis: &lt;length&gt; | auto; /* default auto */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果设置为0, 则子元素内容周围的空隙不会根据flex-grow按比例分配，<br>如果设置为auto，则子元素周围额外的空隙会根据flex-grow按照比例分配，如下图：  </p>
<p><img src="http://i.imgur.com/P89IAI6.png" alt="">  </p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>flex是flex-grow、flex-shrink、flex-basis三个属性的缩写。<br>其中第二个和第三个参数(flex-grow,flex-basis)是可选的。默认值为0 1 auto。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>推荐使用缩写形式而不是单独地设置每一个属性，缩写形式中会智能地计算出相关值。  </p>
<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p><img src="http://i.imgur.com/noM8Qs8.png" alt=""></p>
<p>通过设置某个子元素的align-self属性，可以覆盖align-items所设置的对齐方式。属性值与align-items中的意义相同。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注：float,clear和vertical-align对flex子元素没有任何影响。  </p>
</blockquote>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="示例一：水平垂直居中"><a href="#示例一：水平垂直居中" class="headerlink" title="示例一：水平垂直居中"></a>示例一：水平垂直居中</h2><p>我们从一个非常非常简单的例子开始，解决一个我们经常会遇到的问题：水平垂直居中。如果使用flex布局会非常简单。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.parent &#123;</div><div class="line">  display: flex;</div><div class="line">  height: 300px; /* 随意设定大小 */</div><div class="line">&#125;</div><div class="line"></div><div class="line">.child &#123;</div><div class="line">  width: 100px;  /* 随意设定大小，比父元素要小 */</div><div class="line">  height: 100px; /* 同上 */</div><div class="line">  margin: auto;  /* 见证奇迹的时刻 */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个主要原因是，在flex布局的父元素中设置margin为auto会自动吸收额外的空间，所以设置水平垂直的margin都为auto会使子元素在水平垂直方向上都完美居中。  </p>
<h2 id="示例二：响应式初体验"><a href="#示例二：响应式初体验" class="headerlink" title="示例二：响应式初体验"></a>示例二：响应式初体验</h2><p>现在我们考虑用更多的属性。考虑有6个子元素，有固定的大小，但是我们希望他们能够在改变浏览器宽度的时候仍然可以在水平轴上完美地显示（注意在不使用媒体查询的前提下）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.flex-container &#123;</div><div class="line">  /* 首先我们先创建一个flex布局上下文 */</div><div class="line">  display: flex;</div><div class="line"></div><div class="line">  /* 然后我们定义flex方向和是否允许子元素换行</div><div class="line">   * 注意这与以下代码等价：</div><div class="line">   * flex-direction: row;</div><div class="line">   * flex-wrap: wrap;</div><div class="line">   */</div><div class="line">  flex-flow: row wrap;</div><div class="line"></div><div class="line">  /* 然后我们定义在剩余空间上子元素如何排布 */</div><div class="line">  justify-content: space-around;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://adad" target="_blank" rel="external">示例代码</a></p>
<h2 id="示例三：响应式导航栏"><a href="#示例三：响应式导航栏" class="headerlink" title="示例三：响应式导航栏"></a>示例三：响应式导航栏</h2><p>我们通过灵活使用flex布局尝试一些更好玩的布局。来做一个移动优先的3列布局并带有全屏宽的header和footer。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">.wrapper &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-flow: row wrap;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* 我们要告诉所有的子元素宽度 100% */</div><div class="line">.header, .main, .nav, .aside, .footer &#123;</div><div class="line">  flex: 1 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* 移动优先依赖于源代码默认的渲染顺序</div><div class="line"> * in this case:</div><div class="line"> * 1. header</div><div class="line"> * 2. nav</div><div class="line"> * 3. main</div><div class="line"> * 4. aside</div><div class="line"> * 5. footer</div><div class="line"> */</div><div class="line"></div><div class="line">/* 中屏 */</div><div class="line">@media all and (min-width: 600px) &#123;</div><div class="line">  /* 我们要告诉两边的sidebar共享一个行 */</div><div class="line">  .aside &#123; flex: 1 auto; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* 大屏幕 */</div><div class="line">@media all and (min-width: 800px) &#123;</div><div class="line">  /* 通过order设定各个面板的渲染顺序</div><div class="line">   * 告诉主要面板元素占用侧栏两倍的空间</div><div class="line">   */</div><div class="line">  .main &#123; flex: 2 0px; &#125;</div><div class="line"></div><div class="line">  .aside-1 &#123; order: 1; &#125;</div><div class="line">  .main    &#123; order: 2; &#125;</div><div class="line">  .aside-2 &#123; order: 3; &#125;</div><div class="line">  .footer  &#123; order: 4; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="浏览器前缀"><a href="#浏览器前缀" class="headerlink" title="浏览器前缀"></a>浏览器前缀</h2><p>Flex布局需要一些浏览器前缀来最大力度地兼容大多数的浏览器。Flex布局的前缀不只是在属性前面添加浏览器前缀，不同浏览器下的属性名和属性值都不同，这是因为Flexbox布局的标准一直在变，一共有old, tweener, new 三个版本。  </p>
<p>可能处理前缀的最好方法是使用新的语法书写CSS并通过Autoprefixer运行CSS，能够很好地处理这个问题。  </p>
<p>另外，这里有一个Sass中 @mixin 来处理一些前缀，也可以给你一些处理前缀的启发：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">@mixin flexbox() &#123;</div><div class="line">  display: -webkit-box;</div><div class="line">  display: -moz-box;</div><div class="line">  display: -ms-flexbox;</div><div class="line">  display: -webkit-flex;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@mixin flex($values) &#123;</div><div class="line">  -webkit-box-flex: $values;</div><div class="line">  -moz-box-flex:  $values;</div><div class="line">  -webkit-flex:  $values;</div><div class="line">  -ms-flex:  $values;</div><div class="line">  flex:  $values;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@mixin order($val) &#123;</div><div class="line">  -webkit-box-ordinal-group: $val;  </div><div class="line">  -moz-box-ordinal-group: $val;     </div><div class="line">  -ms-flex-order: $val;     </div><div class="line">  -webkit-order: $val;  </div><div class="line">  order: $val;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.wrapper &#123;</div><div class="line">  @include flexbox();</div><div class="line">&#125;</div><div class="line"></div><div class="line">.item &#123;</div><div class="line">  @include flex(1 200px);</div><div class="line">  @include order(2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><p>首先看一下Flex布局的三个版本  </p>
<p>(new)是指标准中最近的语法(e.g. display:flex;)。<br>(tweener)是指2011年以后非官方的临时版本(e.g. display:flexbox;)。<br>(old)是指2009年以后的旧语法(e.g. display:box;)  </p>
<p><img src="http://i.imgur.com/EQXoxWi.png" alt="">  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flex布局&quot;&gt;&lt;a href=&quot;#Flex布局&quot; class=&quot;headerlink&quot; title=&quot;Flex布局&quot;&gt;&lt;/a&gt;Flex布局&lt;/h1&gt;&lt;h1 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="CSS" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
      <category term="Flex布局" scheme="http://yoursite.com/tags/Flex%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>01_logback配置详解</title>
    <link href="http://yoursite.com/2017/05/14/Backend/Java/Log/logback%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/05/14/Backend/Java/Log/logback配置详解/</id>
    <published>2017-05-14T05:46:07.000Z</published>
    <updated>2017-05-14T05:46:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="logback配置详解"><a href="#logback配置详解" class="headerlink" title="logback配置详解"></a>logback配置详解</h1><h2 id="lt-configuration-gt-根节点包含的属性："><a href="#lt-configuration-gt-根节点包含的属性：" class="headerlink" title="&lt;configuration&gt;根节点包含的属性："></a><code>&lt;configuration&gt;</code>根节点包含的属性：</h2><ul>
<li><p>scan:<br>当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。  </p>
</li>
<li><p>scanPeriod:<br>设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。  </p>
</li>
<li><p>debug:<br>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。  </p>
</li>
</ul>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;  </div><div class="line">      &lt;!-- 其他配置省略--&gt;  </div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<h2 id="lt-configuration-gt-根节点的子节点："><a href="#lt-configuration-gt-根节点的子节点：" class="headerlink" title="&lt;configuration&gt;根节点的子节点："></a><code>&lt;configuration&gt;</code>根节点的子节点：</h2><p><img src="http://i.imgur.com/xQql2Mj.png" alt="">  </p>
<h3 id="lt-contextName-gt-设置上下文名称"><a href="#lt-contextName-gt-设置上下文名称" class="headerlink" title="&lt;contextName&gt; 设置上下文名称"></a><code>&lt;contextName&gt;</code> 设置上下文名称</h3><p>每个logger都关联到logger上下文，默认上下文名称为”default”。<br>但可以使用<contextname>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。  </contextname></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;  </div><div class="line">      &lt;contextName&gt;myAppName&lt;/contextName&gt;  </div><div class="line">      &lt;!-- 其他配置省略--&gt;  </div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<h3 id="lt-property-gt-设置变量"><a href="#lt-property-gt-设置变量" class="headerlink" title="&lt;property&gt; 设置变量"></a><code>&lt;property&gt;</code> 设置变量</h3><p>用来定义变量值的标签，<br><code>&lt;property&gt;</code> 有两个属性，name和value；<br>其中name的值是变量的名称，value的值时变量定义的值。<br>通过<code>&lt;property&gt;</code>定义的值会被插入到logger上下文中。定义变量后，可以使${}来使用变量。<br>例如使用<code>&lt;property&gt;</code>定义上下文名称，然后在<code>&lt;contentName&gt;</code>设置logger上下文时使用。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;  </div><div class="line">      &lt;property name=&quot;APP_Name&quot; value=&quot;myAppName&quot; /&gt;   </div><div class="line">      &lt;contextName&gt;$&#123;APP_Name&#125;&lt;/contextName&gt;  </div><div class="line">      &lt;!-- 其他配置省略--&gt;  </div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<h3 id="lt-timestamp-gt-获取时间戳字符串"><a href="#lt-timestamp-gt-获取时间戳字符串" class="headerlink" title="&lt;timestamp&gt; 获取时间戳字符串"></a><code>&lt;timestamp&gt;</code> 获取时间戳字符串</h3><p>两个属性：  </p>
<ul>
<li>key标识此<code>&lt;timestamp&gt;</code> 的名字；  </li>
<li>datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循Java.txt.SimpleDateFormat的格式。  </li>
</ul>
<p>例如将解析配置文件的时间作为上下文名称：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;  </div><div class="line">      &lt;timestamp key=&quot;bySecond&quot; datePattern=&quot;yyyyMMdd&apos;T&apos;HHmmss&quot;/&gt;   </div><div class="line">      &lt;contextName&gt;$&#123;bySecond&#125;&lt;/contextName&gt;  </div><div class="line">      &lt;!-- 其他配置省略--&gt;  </div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<h3 id="设置loger："><a href="#设置loger：" class="headerlink" title="设置loger："></a>设置loger：</h3><h4 id="lt-loger-gt"><a href="#lt-loger-gt" class="headerlink" title="&lt;loger&gt;"></a><code>&lt;loger&gt;</code></h4><p>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<code>&lt;appender&gt;</code>。<br><code>&lt;loger&gt;</code>仅有一个name属性，一个可选的level和一个可选的addtivity属性。  </p>
<ul>
<li>name:<br>用来指定受此loger约束的某一个包或者具体的某一个类。</li>
<li>level:<br>用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。<br>如果未设置此属性，那么当前loger将会继承上级的级别。  </li>
<li>addtivity:<br>是否向上级loger传递打印信息。默认是true。<br><code>&lt;loger&gt;</code>可以包含零个或多个<code>&lt;appender-ref&gt;</code>元素，标识这个appender将会添加到这个loger。  </li>
</ul>
<h3 id="lt-root-gt"><a href="#lt-root-gt" class="headerlink" title="&lt;root&gt;"></a><code>&lt;root&gt;</code></h3><p>也是<code>&lt;loger&gt;</code>元素，但是它是根loger。只有一个level属性，应为已经被命名为”root”.</p>
<ul>
<li>level:<br>用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。<br>默认是DEBUG。<br><root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。  </appender-ref></root></li>
</ul>
<p>例如：<br>LogbackDemo.java类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package logback;  </div><div class="line">  </div><div class="line">import org.slf4j.Logger;  </div><div class="line">import org.slf4j.LoggerFactory;  </div><div class="line">  </div><div class="line">public class LogbackDemo &#123;</div><div class="line">  </div><div class="line">    private static Logger log = LoggerFactory.getLogger(LogbackDemo.class);  </div><div class="line">  </div><div class="line">    public static void main(String[] args) &#123;  </div><div class="line">        log.trace(&quot;======trace&quot;);  </div><div class="line">        log.debug(&quot;======debug&quot;);  </div><div class="line">        log.info(&quot;======info&quot;);  </div><div class="line">        log.warn(&quot;======warn&quot;);  </div><div class="line">        log.error(&quot;======error&quot;);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="logback-xml配置文件"><a href="#logback-xml配置文件" class="headerlink" title="logback.xml配置文件"></a>logback.xml配置文件</h1><h2 id="第1种：只配置root"><a href="#第1种：只配置root" class="headerlink" title="第1种：只配置root"></a>第1种：只配置root</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class="line">        &lt;!-- encoder 默认配置为PatternLayoutEncoder --&gt;</div><div class="line">        &lt;encoder&gt;</div><div class="line">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class="line">        &lt;/encoder&gt;</div><div class="line">    &lt;/appender&gt;</div><div class="line">  </div><div class="line">    &lt;root level=&quot;INFO&quot;&gt;</div><div class="line">        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class="line">    &lt;/root&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<p>其中appender的配置表示打印到控制台；<br><code>&lt;root level=&quot;INFO&quot;&gt;</code>将root的打印级别设置为“INFO”，指定了名字为“STDOUT”的appender。  </p>
<p>当执行logback.LogbackDemo类的main方法时，root将级别为“INFO”及大于“INFO”的日志信息交给已经配置好的名为“STDOUT”的appender处理，“STDOUT”appender将信息打印到控制台；  </p>
<p>打印结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">13:30:38.484 [main] INFO  logback.LogbackDemo - ======info  </div><div class="line">13:30:38.500 [main] WARN  logback.LogbackDemo - ======warn  </div><div class="line">13:30:38.500 [main] ERROR logback.LogbackDemo - ======error</div></pre></td></tr></table></figure></p>
<h2 id="第2种：带有loger的配置，不指定级别，不指定appender"><a href="#第2种：带有loger的配置，不指定级别，不指定appender" class="headerlink" title="第2种：带有loger的配置，不指定级别，不指定appender"></a>第2种：带有loger的配置，不指定级别，不指定appender</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class="line">        &lt;!-- encoder 默认配置为PatternLayoutEncoder --&gt;</div><div class="line">        &lt;encoder&gt;</div><div class="line">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class="line">        &lt;/encoder&gt;</div><div class="line">    &lt;/appender&gt;</div><div class="line">  </div><div class="line">    &lt;!-- logback为java中的包 --&gt;</div><div class="line">    &lt;logger name=&quot;logback&quot;/&gt;</div><div class="line">    &lt;root level=&quot;DEBUG&quot;&gt;</div><div class="line">        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class="line">    &lt;/root&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<p>其中appender的配置表示打印到控制台；<br><code>&lt;logger name=&quot;logback&quot; /&gt;</code>将控制logback包下的所有类的日志的打印，但是并没用设置打印级别，所以继承他的上级<root>的日志级别“DEBUG”；<br>没有设置addtivity，默认为true，将此loger的打印信息向上级传递；<br>没有设置appender，此loger本身不打印任何信息。<br><code>&lt;root level=&quot;DEBUG&quot;&gt;</code>将root的打印级别设置为“DEBUG”，指定了名字为“STDOUT”的appender。  </root></p>
<p>当执行logback.LogbackDemo类的main方法时，因为LogbackDemo 在包logback中，所以首先执行<code>&lt;logger name=&quot;logback&quot; /&gt;</code>，将级别为“DEBUG”及大于“DEBUG”的日志信息传递给root，本身并不打印；<br>root接到下级传递的信息，交给已经配置好的名为“STDOUT”的appender处理，“STDOUT”appender将信息打印到控制台；  </p>
<p>打印结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">13:19:15.406 [main] DEBUG logback.LogbackDemo - ======debug  </div><div class="line">13:19:15.406 [main] INFO  logback.LogbackDemo - ======info  </div><div class="line">13:19:15.406 [main] WARN  logback.LogbackDemo - ======warn  </div><div class="line">13:19:15.406 [main] ERROR logback.LogbackDemo - ======error</div></pre></td></tr></table></figure></p>
<h2 id="第3种：带有多个loger的配置，指定级别，指定appender"><a href="#第3种：带有多个loger的配置，指定级别，指定appender" class="headerlink" title="第3种：带有多个loger的配置，指定级别，指定appender"></a>第3种：带有多个loger的配置，指定级别，指定appender</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class="line">        &lt;!-- encoder 默认配置为PatternLayoutEncoder --&gt;</div><div class="line">        &lt;encoder&gt;</div><div class="line">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class="line">        &lt;/encoder&gt;</div><div class="line">    &lt;/appender&gt;</div><div class="line">  </div><div class="line">    &lt;!-- logback为java中的包 --&gt;</div><div class="line">    &lt;logger name=&quot;logback&quot;/&gt;</div><div class="line">    &lt;!--logback.LogbackDemo：类的全路径 --&gt;</div><div class="line">    &lt;logger name=&quot;logback.LogbackDemo&quot; level=&quot;INFO&quot; additivity=&quot;false&quot;&gt;</div><div class="line">        &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</div><div class="line">    &lt;/logger&gt;</div><div class="line">  </div><div class="line">    &lt;root level=&quot;ERROR&quot;&gt;</div><div class="line">        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class="line">    &lt;/root&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<p>其中appender的配置表示打印到控制台；  </p>
<p><code>&lt;logger name=&quot;logback&quot; /&gt;</code>将控制logback包下的所有类的日志的打印，但是并没用设置打印级别，所以继承他的上级<root>的日志级别“DEBUG”；<br>没有设置addtivity，默认为true，将此loger的打印信息向上级传递；<br>没有设置appender，此loger本身不打印任何信息。  </root></p>
<p> <code>&lt;logger name=&quot;logback.LogbackDemo&quot; level=&quot;INFO&quot; additivity=&quot;false&quot;&gt;</code>控制logback.LogbackDemo类的日志打印，打印级别为“INFO”；<br>additivity属性为false，表示此loger的打印信息不再向上级传递，<br>指定了名字为“STDOUT”的appender。  </p>
<p><code>&lt;root level=&quot;DEBUG&quot;&gt;</code>将root的打印级别设置为“ERROR”，指定了名字为“STDOUT”的appender。  </p>
<p>当执行logback.LogbackDemo类的main方法时，先执行<code>&lt;logger name=&quot;logback.LogbackDemo&quot; level=&quot;INFO&quot; additivity=&quot;false&quot;&gt;</code>，将级别为“INFO”及大于“INFO”的日志信息交给此loger指定的名为“STDOUT”的appender处理，在控制台中打出日志，不再向次loger的上级 <code>&lt;logger name=&quot;logback&quot;/&gt;</code> 传递打印信息；<br><code>&lt;logger name=&quot;logback&quot;/&gt;</code>未接到任何打印信息，当然也不会给它的上级root传递任何打印信息；  </p>
<p>打印结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">14:05:35.937 [main] INFO  logback.LogbackDemo - ======info  </div><div class="line">14:05:35.937 [main] WARN  logback.LogbackDemo - ======warn  </div><div class="line">14:05:35.937 [main] ERROR logback.LogbackDemo - ======error</div></pre></td></tr></table></figure></p>
<p>如果将<code>&lt;logger name=&quot;logback.LogbackDemo&quot; level=&quot;INFO&quot; additivity=&quot;false&quot;&gt;修改为 &lt;logger name=&quot;logback.LogbackDemo&quot; level=&quot;INFO&quot; additivity=&quot;true&quot;&gt;</code>那打印结果将是什么呢？<br>没错，日志打印了两次，想必大家都知道原因了，因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次</p>
<p>打印结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">14:09:01.531 [main] INFO  logback.LogbackDemo - ======info  </div><div class="line">14:09:01.531 [main] INFO  logback.LogbackDemo - ======info  </div><div class="line">14:09:01.531 [main] WARN  logback.LogbackDemo - ======warn  </div><div class="line">14:09:01.531 [main] WARN  logback.LogbackDemo - ======warn  </div><div class="line">14:09:01.531 [main] ERROR logback.LogbackDemo - ======error  </div><div class="line">14:09:01.531 [main] ERROR logback.LogbackDemo - ======error</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;logback配置详解&quot;&gt;&lt;a href=&quot;#logback配置详解&quot; class=&quot;headerlink&quot; title=&quot;logback配置详解&quot;&gt;&lt;/a&gt;logback配置详解&lt;/h1&gt;&lt;h2 id=&quot;lt-configuration-gt-根节点包含的属性：
    
    </summary>
    
      <category term="后端开发" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java/"/>
    
      <category term="logback" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java/logback/"/>
    
    
      <category term="logback" scheme="http://yoursite.com/tags/logback/"/>
    
  </entry>
  
  <entry>
    <title>02_logback配置详解appender</title>
    <link href="http://yoursite.com/2017/05/14/Backend/Java/Log/logback%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3appender/"/>
    <id>http://yoursite.com/2017/05/14/Backend/Java/Log/logback配置详解appender/</id>
    <published>2017-05-14T05:46:07.000Z</published>
    <updated>2017-05-14T05:46:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="logback配置详解appender"><a href="#logback配置详解appender" class="headerlink" title="logback配置详解appender"></a>logback配置详解appender</h1><p><img src="http://i.imgur.com/QIUk9fj.png" alt="">  </p>
<p><code>&lt;appender&gt;</code><br><code>&lt;appender&gt;</code>是<code>&lt;configuration&gt;</code>的子节点，是负责写日志的组件。<br><code>&lt;appender&gt;</code>有两个必要属性name和class。name指定appender名称，class指定appender的全限定名。  </p>
<h2 id="ConsoleAppender"><a href="#ConsoleAppender" class="headerlink" title="ConsoleAppender"></a>ConsoleAppender</h2><p>把日志添加到控制台，有以下子节点：<br><code>&lt;encoder&gt;</code> 对日志进行格式化。（具体参数稍后讲解 ）<br><code>&lt;target&gt;</code> 字符串 System.out 或者 System.err ，默认 System.out ；  </p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;  </div><div class="line">  </div><div class="line">  &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;  </div><div class="line">    &lt;encoder&gt;  </div><div class="line">      &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg %n&lt;/pattern&gt;  </div><div class="line">    &lt;/encoder&gt;  </div><div class="line">  &lt;/appender&gt;  </div><div class="line">  </div><div class="line">  &lt;root level=&quot;DEBUG&quot;&gt;  </div><div class="line">    &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;  </div><div class="line">  &lt;/root&gt;  </div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<h2 id="FileAppender"><a href="#FileAppender" class="headerlink" title="FileAppender"></a>FileAppender</h2><p>把日志添加到文件，有以下子节点：<br><code>&lt;file&gt;</code> 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。<br><code>&lt;append&gt;</code> 如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。<br><code>&lt;encoder&gt;</code> 对记录事件进行格式化。<br><code>&lt;prudent&gt;</code> 如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。  </p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;  </div><div class="line">  </div><div class="line">  &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;  </div><div class="line">    &lt;file&gt;testFile.log&lt;/file&gt;  </div><div class="line">    &lt;append&gt;true&lt;/append&gt;  </div><div class="line">    &lt;encoder&gt;  </div><div class="line">      &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;  </div><div class="line">    &lt;/encoder&gt;  </div><div class="line">  &lt;/appender&gt;  </div><div class="line">  </div><div class="line">  &lt;root level=&quot;DEBUG&quot;&gt;  </div><div class="line">    &lt;appender-ref ref=&quot;FILE&quot; /&gt;  </div><div class="line">  &lt;/root&gt;  </div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<h2 id="RollingFileAppender"><a href="#RollingFileAppender" class="headerlink" title="RollingFileAppender"></a>RollingFileAppender</h2><p>滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：<br><code>&lt;file&gt;</code>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。<br><code>&lt;append&gt;</code>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。<br><code>&lt;encoder&gt;</code>：对记录事件进行格式化。<br><code>&lt;rollingPolicy&gt;</code>:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。<br><code>&lt;triggeringPolicy &gt;</code>: 告知 RollingFileAppender 何时激活滚动。<br><code>&lt;prudent&gt;</code>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。  </p>
<h3 id="lt-rollingPolicy-gt-滚动策略"><a href="#lt-rollingPolicy-gt-滚动策略" class="headerlink" title="&lt;rollingPolicy&gt; 滚动策略"></a><code>&lt;rollingPolicy&gt;</code> 滚动策略</h3><ol>
<li><p>TimeBasedRollingPolicy<br>最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：<br><code>&lt;fileNamePattern&gt;</code><br>必要节点，包含文件名及 %d 转换符， “%d”可以包含一个Java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。如果直接使用 %d，默认格式是 yyyy-MM-dd。<br>RollingFileAppender 的file子节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。<br><code>&lt;maxHistory&gt;</code><br>可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且<maxhistory>是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。</maxhistory></p>
</li>
<li><p>FixedWindowRollingPolicy<br>根据固定窗口算法重命名文件的滚动策略。有以下子节点：<br><code>&lt;minIndex&gt;</code> 窗口索引最小值<br><code>&lt;maxIndex&gt;</code> 窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。<br><code>&lt;fileNamePattern &gt;</code> 必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip  </p>
</li>
</ol>
<h3 id="lt-triggeringPolicy-gt"><a href="#lt-triggeringPolicy-gt" class="headerlink" title="&lt;triggeringPolicy&gt;"></a><code>&lt;triggeringPolicy&gt;</code></h3><p>SizeBasedTriggeringPolicy： 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。只有一个节点:<br><code>&lt;maxFileSize&gt;</code>:这是活动文件的大小，默认值是10MB。</p>
<p>例如：<br>每天生成一个日志文件，保存30天的日志文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;   </div><div class="line">  &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;   </div><div class="line">  </div><div class="line">    &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;   </div><div class="line">      &lt;fileNamePattern&gt;logFile.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt;   </div><div class="line">      &lt;maxHistory&gt;30&lt;/maxHistory&gt;    </div><div class="line">    &lt;/rollingPolicy&gt;   </div><div class="line">  </div><div class="line">    &lt;encoder&gt;   </div><div class="line">      &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;   </div><div class="line">    &lt;/encoder&gt;   </div><div class="line">  &lt;/appender&gt;    </div><div class="line">  </div><div class="line">  &lt;root level=&quot;DEBUG&quot;&gt;   </div><div class="line">    &lt;appender-ref ref=&quot;FILE&quot; /&gt;   </div><div class="line">  &lt;/root&gt;   </div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>例如：<br>按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;   </div><div class="line">  &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;   </div><div class="line">    &lt;file&gt;test.log&lt;/file&gt;   </div><div class="line">  </div><div class="line">    &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;&gt;   </div><div class="line">      &lt;fileNamePattern&gt;tests.%i.log.zip&lt;/fileNamePattern&gt;   </div><div class="line">      &lt;minIndex&gt;1&lt;/minIndex&gt;   </div><div class="line">      &lt;maxIndex&gt;3&lt;/maxIndex&gt;   </div><div class="line">    &lt;/rollingPolicy&gt;   </div><div class="line">  </div><div class="line">    &lt;triggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;   </div><div class="line">      &lt;maxFileSize&gt;5MB&lt;/maxFileSize&gt;   </div><div class="line">    &lt;/triggeringPolicy&gt;   </div><div class="line">    &lt;encoder&gt;   </div><div class="line">      &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;   </div><div class="line">    &lt;/encoder&gt;   </div><div class="line">  &lt;/appender&gt;   </div><div class="line">  </div><div class="line">  &lt;root level=&quot;DEBUG&quot;&gt;   </div><div class="line">    &lt;appender-ref ref=&quot;FILE&quot; /&gt;   </div><div class="line">  &lt;/root&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>另外还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，这些就不在这里讲解了，大家可以参考官方文档。当然大家可以编写自己的Appender。  </p>
<h2 id="lt-encoder-gt"><a href="#lt-encoder-gt" class="headerlink" title="&lt;encoder&gt;"></a><code>&lt;encoder&gt;</code></h2><p>负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。<br>目前PatternLayoutEncoder 是唯一有用的且默认的encoder ，有一个<code>&lt;pattern&gt;</code>节点，用来设置日志的输入格式。使用“%”加“转换符”方式，如果要输出“%”，则必须用“\”对“%”进行转义。  </p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;encoder&gt;   </div><div class="line">   &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;   </div><div class="line">&lt;/encoder</div></pre></td></tr></table></figure></p>
<p><code>&lt;pattern&gt;</code>里面的转换符说明：  </p>
<table><br><tbody><br><tr><br><th>转换符</th><br><th>作用</th><br></tr><br><tr><br><td align="middle">c<span>&nbsp;</span>{<em>length</em><span>&nbsp;</span>}<span>&nbsp;</span><br><br><strong>lo</strong><span>&nbsp;</span>{<em>length</em><span>&nbsp;</span>}<span>&nbsp;</span><br><br><strong>logger</strong><span>&nbsp;</span>{<em>length</em><span>&nbsp;</span>}<span>&nbsp;</span></td><br><td>输出日志的logger名，可有一个整形参数，功能是缩短logger名，设置为0表示只输入logger最右边点符号之后的字符串。<br><table><br><tbody><br><tr><br><th>Conversion specifier</th><br><th>Logger name</th><br><th>Result</th><br></tr><br><tr><br><td>%logger</td><br><td>mainPackage.sub.sample.Bar</td><br><td>mainPackage.sub.sample.Bar</td><br></tr><br><tr><br><td>%logger{0}</td><br><td>mainPackage.sub.sample.Bar</td><br><td>Bar</td><br></tr><br><tr><br><td>%logger{5}</td><br><td>mainPackage.sub.sample.Bar</td><br><td>m.s.s.Bar</td><br></tr><br><tr><br><td>%logger{10}</td><br><td>mainPackage.sub.sample.Bar</td><br><td>m.s.s.Bar</td><br></tr><br><tr><br><td>%logger{15}</td><br><td>mainPackage.sub.sample.Bar</td><br><td>m.s.sample.Bar</td><br></tr><br><tr><br><td>%logger{16}</td><br><td>mainPackage.sub.sample.Bar</td><br><td>m.sub.sample.Bar</td><br></tr><br><tr><br><td>%logger{26}</td><br><td>mainPackage.sub.sample.Bar</td><br><td>mainPackage.sub.sample.Bar</td><br></tr><br></tbody><br></table><br><p><br>&nbsp;</p><br></td><br></tr><br><tr><br><td><strong>C</strong><span>&nbsp;</span>{<em>length</em><span>&nbsp;</span>}<span>&nbsp;</span><br><br><strong>class</strong><span>&nbsp;</span>{<em>length</em><span>&nbsp;</span>}<span>&nbsp;</span></td><br><td>输出执行记录请求的调用者的全限定名。参数与上面的一样。尽量避免使用，除非执行速度不造成任何问题。</td><br></tr><br><tr><br><td><strong>contextName</strong><span>&nbsp;</span><br><br><strong>cn</strong><span>&nbsp;</span></td><br><td>输出上下文名称。</td><br></tr><br><tr><br><td><strong>d</strong><span>&nbsp;</span>{<em>pattern</em><span>&nbsp;</span>}<span>&nbsp;</span><br><br><strong>date</strong><span>&nbsp;</span>{<em>pattern</em><span>&nbsp;</span>}<span>&nbsp;</span></td><br><td>输出日志的打印日志，模式语法与<code>java.text.SimpleDateFormat</code><span>&nbsp;</span>兼容。<br><table><br><tbody><br><tr><br><th>Conversion Pattern</th><br><th>Result</th><br></tr><br><tr><br><td>%d</td><br><td>2006-10-20 14:06:49,812</td><br></tr><br><tr><br><td>%date</td><br><td>2006-10-20 14:06:49,812</td><br></tr><br><tr><br><td>%date{ISO8601}</td><br><td>2006-10-20 14:06:49,812</td><br></tr><br><tr><br><td>%date{HH:mm:ss.SSS}</td><br><td>14:06:49.812</td><br></tr><br><tr><br><td>%date{dd&nbsp;MMM&nbsp;yyyy&nbsp;;HH:mm:ss.SSS}</td><br><td>20 oct. 2006;14:06:49.812</td><br></tr><br></tbody><br></table><br></td><br></tr><br><tr><br><td><strong>F / file</strong></td><br><td>输出执行记录请求的java源文件名。尽量避免使用，除非执行速度不造成任何问题。</td><br></tr><br><tr><br><td><strong>caller{depth}caller{depth, evaluator-1, … evaluator-n}</strong></td><br><td>输出生成日志的调用者的位置信息，整数选项表示输出信息深度。<br><p><br>例如，<span>&nbsp;</span><strong>%caller{2}</strong><span>&nbsp;</span>&nbsp; 输出为：</p><br><pre>0    [main] DEBUG - logging statement<br>Caller&#43;0   at mainPackage.sub.sample.Bar.sampleMethodName(Bar.java:22)<br>Caller&#43;1   at mainPackage.sub.sample.Bar.createLoggingRequest(Bar.java:17)</pre><br><p><br>例如，<span>&nbsp;</span><strong>%caller{3}</strong><span>&nbsp;</span>&nbsp; 输出为：</p><br><pre>16   [main] DEBUG - logging statement<br>Caller&#43;0   at mainPackage.sub.sample.Bar.sampleMethodName(Bar.java:22)<br>Caller&#43;1   at mainPackage.sub.sample.Bar.createLoggingRequest(Bar.java:17)<br>Caller&#43;2   at mainPackage.ConfigTester.main(ConfigTester.java:38)</pre><br></td><br></tr><br><tr><br><td><strong>L / line</strong></td><br><td>输出执行日志请求的行号。尽量避免使用，除非执行速度不造成任何问题。</td><br></tr><br><tr><br><td><strong>m / msg / message</strong></td><br><td><br><p><br>输出应用程序提供的信息。</p><br></td><br></tr><br><tr><br><td><strong>M / method</strong></td><br><td>输出执行日志请求的方法名。尽量避免使用，除非执行速度不造成任何问题。</td><br></tr><br><tr><br><td><strong>n</strong></td><br><td>输出平台先关的分行符“\n”或者“\r\n”。</td><br></tr><br><tr><br><td><strong>p / le / level</strong></td><br><td>输出日志级别。</td><br></tr><br><tr><br><td><strong>r / relative</strong></td><br><td>输出从程序启动到创建日志记录的时间，单位是毫秒</td><br></tr><br><tr><br><td><strong>t / thread</strong></td><br><td>输出产生日志的线程名。</td><br></tr><br><tr><br><td><span><strong>replace(<em>p</em><span>&nbsp;</span>){r, t}</strong></span></td><br><td><br><p><br><strong>p</strong><span>&nbsp;</span>为日志内容，<strong>r</strong><span>&nbsp;</span>是正则表达式，将<strong>p</strong><span>&nbsp;</span>中符合<strong>r</strong><span>&nbsp;</span>的内容替换为<strong>t</strong><span>&nbsp;</span>。</p><br><p><br>例如， &quot;%replace(%msg){‘\s’, ‘’}&quot;</p><br></td><br></tr><br></tbody><br></table>



<p>格式修饰符，与转换符共同使用：<br>可选的格式修饰符位于“%”和转换符之间。<br>第一个可选修饰符是左对齐 标志，符号是减号“-”；接着是可选的最小宽度 修饰符，用十进制数表示。<br>如果字符小于最小宽度，则左填充或右填充，默认是左填充（即右对齐），填充符为空格。<br>如果字符大于最小宽度，字符永远不会被截断。最大宽度 修饰符，符号是点号”.”后面加十进制数。<br>如果字符大于最大宽度，则从前面截断。点符号“.”后面加减号“-”在加数字，表示从尾部截断。  </p>
<p>例如：%-4relative 表示，将输出从程序启动到创建日志记录的时间 进行左对齐 且最小宽度为4。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;logback配置详解appender&quot;&gt;&lt;a href=&quot;#logback配置详解appender&quot; class=&quot;headerlink&quot; title=&quot;logback配置详解appender&quot;&gt;&lt;/a&gt;logback配置详解appender&lt;/h1&gt;&lt;p&gt;&lt;i
    
    </summary>
    
      <category term="后端开发" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java/"/>
    
      <category term="logback" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java/logback/"/>
    
    
      <category term="logback" scheme="http://yoursite.com/tags/logback/"/>
    
  </entry>
  
  <entry>
    <title>03_logback配置详解filter</title>
    <link href="http://yoursite.com/2017/05/14/Backend/Java/Log/logback%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3filter/"/>
    <id>http://yoursite.com/2017/05/14/Backend/Java/Log/logback配置详解filter/</id>
    <published>2017-05-14T05:46:07.000Z</published>
    <updated>2017-05-14T05:46:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="logback配置详解filter"><a href="#logback配置详解filter" class="headerlink" title="logback配置详解filter"></a>logback配置详解filter</h1><h2 id="lt-filter-gt"><a href="#lt-filter-gt" class="headerlink" title="&lt;filter&gt;"></a><code>&lt;filter&gt;</code></h2><p>过滤器，执行一个过滤器会有返回个枚举值，即DENY，NEUTRAL，ACCEPT其中之一。<br>返回DENY，日志将立即被抛弃不再经过其他过滤器；<br>返回NEUTRAL，有序列表里的下个过滤器过接着处理日志；<br>返回ACCEPT，日志会被立即处理，不再经过剩余过滤器。  </p>
<p>过滤器被添加到 <code>&lt;appender&gt;</code> 中，为 <code>&lt;appender&gt;</code> 添加一个或多个过滤器后，可以用任意条件对日志进行过滤。<br><code>&lt;Appender&gt;</code> 有多个过滤器时，按照配置顺序执行。  </p>
<p>下面是几个常用的过滤器：</p>
<h3 id="LevelFilter-级别过滤器，根据日志级别进行过滤"><a href="#LevelFilter-级别过滤器，根据日志级别进行过滤" class="headerlink" title="LevelFilter 级别过滤器，根据日志级别进行过滤"></a>LevelFilter 级别过滤器，根据日志级别进行过滤</h3><p>如果日志级别等于配置级别，过滤器会根据 onMath 和 onMismatch 接收或拒绝日志。有以下子节点：  </p>
<p><level>:设置过滤级别  </level></p>
<p><onmatch>:用于配置符合过滤条件的操作  </onmatch></p>
<p><onmismatch>:用于配置不符合过滤条件的操作  </onmismatch></p>
<p>例如：将过滤器的日志级别配置为INFO，所有INFO级别的日志交给appender处理，非INFO级别的日志，被过滤掉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">  </div><div class="line">  &lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;   </div><div class="line">    &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;   </div><div class="line">      &lt;level&gt;INFO&lt;/level&gt;</div><div class="line">      &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</div><div class="line">      &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</div><div class="line">    &lt;/filter&gt;</div><div class="line">  </div><div class="line">    &lt;encoder&gt;</div><div class="line">      &lt;pattern&gt;</div><div class="line">        %-4relative [%thread] %-5level %logger&#123;30&#125; - %msg%n   </div><div class="line">      &lt;/pattern&gt;</div><div class="line">    &lt;/encoder&gt;</div><div class="line">  &lt;/appender&gt;</div><div class="line">  </div><div class="line">  &lt;root level=&quot;DEBUG&quot;&gt;   </div><div class="line">    &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;   </div><div class="line">  &lt;/root&gt;   </div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<h3 id="ThresholdFilter-临界值过滤器，过滤掉低于指定临界值的日志"><a href="#ThresholdFilter-临界值过滤器，过滤掉低于指定临界值的日志" class="headerlink" title="ThresholdFilter 临界值过滤器，过滤掉低于指定临界值的日志"></a>ThresholdFilter 临界值过滤器，过滤掉低于指定临界值的日志</h3><p>当日志级别等于或高于临界值时，过滤器返回NEUTRAL；<br>当日志级别低于临界值时，日志会被拒绝。  </p>
<p>例如：过滤掉所有低于INFO级别的日志。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;   </div><div class="line">  </div><div class="line">  &lt;appender name=&quot;CONSOLE&quot;   </div><div class="line">    class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;   </div><div class="line">    &lt;!-- 过滤掉 TRACE 和 DEBUG 级别的日志--&gt;   </div><div class="line">    &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;   </div><div class="line">      &lt;level&gt;INFO&lt;/level&gt;   </div><div class="line">    &lt;/filter&gt;   </div><div class="line">    &lt;encoder&gt;   </div><div class="line">      &lt;pattern&gt;   </div><div class="line">        %-4relative [%thread] %-5level %logger&#123;30&#125; - %msg%n   </div><div class="line">      &lt;/pattern&gt;   </div><div class="line">    &lt;/encoder&gt;   </div><div class="line">  &lt;/appender&gt;   </div><div class="line">  </div><div class="line">  &lt;root level=&quot;DEBUG&quot;&gt;   </div><div class="line">    &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;   </div><div class="line">  &lt;/root&gt;   </div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<h3 id="EvaluatorFilter-求值过滤器，评估、鉴别日志是否符合指定条件"><a href="#EvaluatorFilter-求值过滤器，评估、鉴别日志是否符合指定条件" class="headerlink" title="EvaluatorFilter 求值过滤器，评估、鉴别日志是否符合指定条件"></a>EvaluatorFilter 求值过滤器，评估、鉴别日志是否符合指定条件</h3><p>有以下子节点：<br><code>&lt;evaluator&gt;</code><br>鉴别器，常用的鉴别器是JaninoEventEvaluato，也是默认的鉴别器，它以任意的Java布尔值表达式作为求值条件，求值条件在配置文件解释过成功被动态编译，布尔值表达式返回true就表示符合过滤条件。<br>evaluator有个子标签<code>&lt;expression&gt;</code>，用于配置求值条件。  </p>
<p>求值表达式作用于当前日志，logback向求值表达式暴露日志的各种字段：  </p>
<table class="bodyTable" border="0" style="padding-left:60px"><br><tbody><br><tr><br><th style="text-align:left; font-weight:bold">Name</th><br><th style="text-align:left; font-weight:bold">Type</th><br><th style="text-align:left; font-weight:bold">Description</th><br></tr><br><tr><br><td style="font-size:1em">event</td><br><td style="font-size:1em"><code style="font-family:'Courier New',Courier,monospace; white-space:pre; font-size:1em">LoggingEvent</code></td><br><td style="font-size:1em">与记录请求相关联的原始记录事件，下面所有变量都来自event，例如，event.getMessage()返回下面&quot;message&quot;相同的字符串</td><br></tr><br><tr class="alt"><br><td style="font-size:1em">message</td><br><td style="font-size:1em"><code style="font-family:'Courier New',Courier,monospace; white-space:pre; font-size:1em">String</code></td><br><td style="font-size:1em">日志的原始消息，例如，设有logger mylogger，&quot;name&quot;的&#20540;是&quot;AUB&quot;，对于 mylogger.info(&quot;Hello {}&quot;,name); &quot;Hello {}&quot;就是原始消息。</td><br></tr><br><tr><br><td style="font-size:1em">formatedMessage</td><br><td style="font-size:1em"><code style="font-family:'Courier New',Courier,monospace; white-space:pre; font-size:1em">String</code></td><br><td style="font-size:1em">日志被各式话的消息，例如，设有logger mylogger，&quot;name&quot;的&#20540;是&quot;AUB&quot;，对于 mylogger.info(&quot;Hello {}&quot;,name); &quot;Hello Aub&quot;就是&#26684;式化后的消息。</td><br></tr><br><tr class="alt"><br><td style="font-size:1em">logger</td><br><td style="font-size:1em"><code style="font-family:'Courier New',Courier,monospace; white-space:pre; font-size:1em">String</code></td><br><td style="font-size:1em">logger 名。</td><br></tr><br><tr><br><td style="font-size:1em">loggerContext</td><br><td style="font-size:1em"><code style="font-family:'Courier New',Courier,monospace; white-space:pre; font-size:1em">LoggerContextVO</code></td><br><td style="font-size:1em">日志所属的logger上下文。</td><br></tr><br><tr class="alt"><br><td style="font-size:1em">level</td><br><td style="font-size:1em"><code style="font-family:'Courier New',Courier,monospace; white-space:pre; font-size:1em">int</code></td><br><td style="font-size:1em">级别对应的整数&#20540;，所以<span>&nbsp;</span><em style="font-style:italic">level &gt; INFO<span>&nbsp;</span></em>是正确的表达式。</td><br></tr><br><tr><br><td style="font-size:1em">timeStamp</td><br><td style="font-size:1em"><code style="font-family:'Courier New',Courier,monospace; white-space:pre; font-size:1em">long</code></td><br><td style="font-size:1em">创建日志的时间戳。</td><br></tr><br><tr class="alt"><br><td style="font-size:1em">marker</td><br><td style="font-size:1em"><code style="font-family:'Courier New',Courier,monospace; white-space:pre; font-size:1em">Marker</code></td><br><td style="font-size:1em">与日志请求相关联的Marker对象，注意“Marker”有可能为null，所以你要确保它不能是null。</td><br></tr><br><tr><br><td style="font-size:1em">mdc</td><br><td style="font-size:1em"><code style="font-family:'Courier New',Courier,monospace; white-space:pre; font-size:1em">Map</code></td><br><td style="font-size:1em">包含创建日志期间的MDC所有&#20540;得map。访问方法是：<em style="font-style:italic">mdc.get(&quot;myKey&quot;)</em><span>&nbsp;</span>。mdc.get()返回的是Object不是String，要想调用String的方法就要强转，例如，<br><p style="padding-bottom:0px; margin:0px; padding-left:0px; padding-right:0px; padding-top:0px"><br><code style="font-family:'Courier New',Courier,monospace; white-space:pre; font-size:1em">((String)&nbsp;mdc.get(&quot;k&quot;)).contains(&quot;val&quot;)</code><span>&nbsp;</span>.MDC可能为null，调用时注意。</p><br></td><br></tr><br><tr class="alt"><br><td style="font-size:1em">throwable</td><br><td style="font-size:1em">java.lang.Throwable</td><br><td style="font-size:1em">如果没有异常与日志关联&quot;throwable&quot; 变量为 null. 不幸的是， &quot;throwable&quot; 不能被序列化。在远程系统上永远为null，对于与位置无关的表达式请使用下面的变量<code style="font-family:'Courier New',Courier,monospace; white-space:pre; font-size:1em">throwableProxy</code></td><br></tr><br><tr><br><td style="font-size:1em">throwableProxy</td><br><td style="font-size:1em"><code style="font-family:'Courier New',Courier,monospace; white-space:pre; font-size:1em">IThrowableProxy</code></td><br><td style="font-size:1em">与日志事件关联的异常代理。如果没有异常与日志事件关联，则变量&quot;throwableProxy&quot; 为 null. 当异常被关联到日志事件时，&quot;throwableProxy&quot; 在远程系统上不会为null</td><br></tr><br></tbody><br></table>


<p><onmatch>:用于配置符合过滤条件的操作  </onmatch></p>
<p><onmismatch>:用于配置不符合过滤条件的操作  </onmismatch></p>
<p>例如：过滤掉所有日志消息中不包含“billing”字符串的日志。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;   </div><div class="line">  </div><div class="line">  &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;   </div><div class="line">    &lt;filter class=&quot;ch.qos.logback.core.filter.EvaluatorFilter&quot;&gt;</div><div class="line">      &lt;evaluator&gt; &lt;!-- 默认为 ch.qos.logback.classic.boolex.JaninoEventEvaluator --&gt;</div><div class="line">        &lt;expression&gt;return message.contains(&quot;billing&quot;);&lt;/expression&gt;</div><div class="line">      &lt;/evaluator&gt;</div><div class="line">      &lt;onMatch&gt;ACCEPT &lt;/onMatch&gt;</div><div class="line">      &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</div><div class="line">    &lt;/filter&gt;</div><div class="line">    &lt;encoder&gt;   </div><div class="line">      &lt;pattern&gt;   </div><div class="line">        %-4relative [%thread] %-5level %logger - %msg%n   </div><div class="line">      &lt;/pattern&gt;   </div><div class="line">    &lt;/encoder&gt;   </div><div class="line">  &lt;/appender&gt;   </div><div class="line">  </div><div class="line">  &lt;root level=&quot;INFO&quot;&gt;   </div><div class="line">    &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;   </div><div class="line">  &lt;/root&gt;   </div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p><code>&lt;matcher&gt;</code><br>匹配器，尽管可以使用String类的matches()方法进行模式匹配，但会导致每次调用过滤器时都会创建一个新的Pattern对象，为了消除这种开销，可以预定义一个或多个matcher对象，定以后就可以在求值表达式中重复引用。<code>&lt;matcher&gt;</code>是<code>&lt;evaluator&gt;</code>的子标签。<br><code>&lt;matcher&gt;</code>中包含两个子标签，<br>一个是<code>&lt;name&gt;</code>，用于定义matcher的名字，求值表达式中使用这个名字来引用matcher；<br>另一个是<code>&lt;regex&gt;</code>，用于配置匹配条件。  </p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;configuration debug=&quot;true&quot;&gt;   </div><div class="line">  </div><div class="line">  &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;   </div><div class="line">    &lt;filter class=&quot;ch.qos.logback.core.filter.EvaluatorFilter&quot;&gt;</div><div class="line">      &lt;evaluator&gt;</div><div class="line">        &lt;matcher&gt;</div><div class="line">          &lt;Name&gt;odd&lt;/Name&gt;</div><div class="line">          &lt;!-- filter out odd numbered statements --&gt;</div><div class="line">          &lt;regex&gt;statement [13579]&lt;/regex&gt;</div><div class="line">        &lt;/matcher&gt;</div><div class="line">  </div><div class="line">        &lt;expression&gt;odd.matches(formattedMessage)&lt;/expression&gt;</div><div class="line">      &lt;/evaluator&gt;</div><div class="line"></div><div class="line">      &lt;OnMismatch&gt;NEUTRAL&lt;/OnMismatch&gt;</div><div class="line">      &lt;OnMatch&gt;DENY&lt;/OnMatch&gt;</div><div class="line">    &lt;/filter&gt;</div><div class="line"></div><div class="line">    &lt;encoder&gt;   </div><div class="line">      &lt;pattern&gt;%-4relative [%thread] %-5level %logger - %msg%n&lt;/pattern&gt;   </div><div class="line">    &lt;/encoder&gt;   </div><div class="line">  &lt;/appender&gt;   </div><div class="line">  </div><div class="line">  &lt;root level=&quot;DEBUG&quot;&gt;   </div><div class="line">    &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;   </div><div class="line">  &lt;/root&gt;   </div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;!-- if debug set to true, context info always print  </div><div class="line"> otherwise the contex info will print when error occour --&gt;  </div><div class="line">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;   </div><div class="line">  </div><div class="line">  &lt;appender name=&quot;stdout&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;    </div><div class="line">     &lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;    </div><div class="line">       &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;40&#125; - %msg%n&lt;/pattern&gt;    </div><div class="line">     &lt;/layout&gt;    </div><div class="line">   &lt;/appender&gt;    </div><div class="line">  </div><div class="line"> &lt;!-- 所有日志文件--&gt;  </div><div class="line"> &lt;appender name=&quot;AllLog&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;   </div><div class="line">  &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;  </div><div class="line">   &lt;fileNamePattern&gt;log/abcchina/all/%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt;   </div><div class="line">   &lt;maxHistory&gt;30&lt;/maxHistory&gt;   </div><div class="line">  &lt;/rollingPolicy&gt;   </div><div class="line">  &lt;encoder&gt;   </div><div class="line">   &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;40&#125; - %msg%n&lt;/pattern&gt;   </div><div class="line">  &lt;/encoder&gt;   </div><div class="line"> &lt;/appender&gt;  </div><div class="line">  </div><div class="line"> &lt;appender name=&quot;TaskLog&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;  </div><div class="line">  &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;  </div><div class="line">   &lt;fileNamePattern&gt;log/abcchina/task/%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt;   </div><div class="line">   &lt;maxHistory&gt;30&lt;/maxHistory&gt;  </div><div class="line">  &lt;/rollingPolicy&gt;   </div><div class="line">  &lt;encoder&gt;   </div><div class="line">   &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;40&#125; - %msg%n&lt;/pattern&gt;   </div><div class="line">  &lt;/encoder&gt;   </div><div class="line"> &lt;/appender&gt;  </div><div class="line"> &lt;appender name=&quot;SendLog&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;  </div><div class="line">  &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;  </div><div class="line">   &lt;fileNamePattern&gt;log/abcchina/send/%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt;   </div><div class="line">   &lt;maxHistory&gt;30&lt;/maxHistory&gt;  </div><div class="line">  &lt;/rollingPolicy&gt;   </div><div class="line">  &lt;encoder&gt;   </div><div class="line">   &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;40&#125; - %msg%n&lt;/pattern&gt;   </div><div class="line">  &lt;/encoder&gt;   </div><div class="line"> &lt;/appender&gt;  </div><div class="line"> &lt;!-- 为莫个包下的所有类指定Appender 这里也可以指定类名称例如：com.aa.bb.ClassName--&gt;    </div><div class="line"> &lt;logger name=&quot;com.aa.bb&quot; &gt;  </div><div class="line">  &lt;appender-ref ref=&quot;TaskLog&quot; /&gt;  </div><div class="line"> &lt;/logger&gt;  </div><div class="line">   </div><div class="line"> &lt;logger name=&quot;com.aa.cc&quot; &gt;  </div><div class="line">  &lt;appender-ref ref=&quot;SendLog&quot; /&gt;  </div><div class="line"> &lt;/logger&gt;  </div><div class="line">  </div><div class="line"> &lt;root level=&quot;INFO&quot;&gt;   </div><div class="line">  &lt;appender-ref ref=&quot;AllLog&quot; /&gt;  </div><div class="line"> &lt;/root&gt;   </div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;logback配置详解filter&quot;&gt;&lt;a href=&quot;#logback配置详解filter&quot; class=&quot;headerlink&quot; title=&quot;logback配置详解filter&quot;&gt;&lt;/a&gt;logback配置详解filter&lt;/h1&gt;&lt;h2 id=&quot;lt-fi
    
    </summary>
    
      <category term="后端开发" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java/"/>
    
      <category term="logback" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java/logback/"/>
    
    
      <category term="logback" scheme="http://yoursite.com/tags/logback/"/>
    
  </entry>
  
  <entry>
    <title>01_Oracle用户&amp;表空间&amp;约束&amp;查询</title>
    <link href="http://yoursite.com/2017/04/27/Database/Oracle/01_Oracle%E7%94%A8%E6%88%B7&amp;%E8%A1%A8%E7%A9%BA%E9%97%B4&amp;%E7%BA%A6%E6%9D%9F&amp;%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2017/04/27/Database/Oracle/01_Oracle用户&amp;表空间&amp;约束&amp;查询/</id>
    <published>2017-04-27T04:27:56.000Z</published>
    <updated>2017-04-27T04:27:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户与表空间"><a href="#用户与表空间" class="headerlink" title="用户与表空间"></a>用户与表空间</h1><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><h3 id="登入SQL-Plus"><a href="#登入SQL-Plus" class="headerlink" title="登入SQL Plus"></a>登入SQL Plus</h3><p>系统用户<br>sys 权限大于 system  系统管理员<br>sysman  </p>
<p>scott默认密码tiger  </p>
<p>使用系统用户登录<br>[username/password] [@server] [as sysdba|sysoper]  </p>
<p>system/password @orcl as sysdba<br>orcl就是自己设置的服务名  </p>
<p>system/password [@server]<br>connect sys/password [@server] as sysdba;  </p>
<h3 id="查看登录用户"><a href="#查看登录用户" class="headerlink" title="查看登录用户"></a>查看登录用户</h3><p>show user命令<br>show user  </p>
<p>dba_users数据字典<br>数据字典是数据库提供的表，用于查看数据库的信息。<br>desc dba_users<br>select username from dba_users;  </p>
<h3 id="启用scott用户"><a href="#启用scott用户" class="headerlink" title="启用scott用户"></a>启用scott用户</h3><p>启用用户的语句<br>alter user username account unlock;<br>锁定用户<br>alter user username account lock;  </p>
<p>使用scott用户登录SQL Plus<br>connect scott/tiger  </p>
<h2 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h2><h3 id="表空间概述"><a href="#表空间概述" class="headerlink" title="表空间概述"></a>表空间概述</h3><ul>
<li><p>理解表空间<br>数据库与表空间<br>表空间与数据文件  </p>
</li>
<li><p>表空间的分类<br>永久表空间<br>临时表空间<br>UNDO表空间  </p>
</li>
</ul>
<h3 id="查看用户的表空间"><a href="#查看用户的表空间" class="headerlink" title="查看用户的表空间"></a>查看用户的表空间</h3><ul>
<li>dba_tablespaces、user_tablespaces数据字典  </li>
</ul>
<p>dba_tablespaces系统管理员级的用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">desc dba_tablespaces</div><div class="line">select tablespace_name from dba_tablespaces;</div><div class="line">TABLESPACE_NAME</div><div class="line">SYSTEM  # 主要是用来存放sys用户的表，视图以及存储过程的数据库对象，也称为系统表空间</div><div class="line">SYSAUX  # EXAMPLE的辅助表空间</div><div class="line">UNDOTBS1  # 用户存储一些撤销信息的，属于UNDO类型的表空间</div><div class="line">TEMP  # 处理表的索引信息的，临时表空间</div><div class="line">USERS  # 永久性表空间，存储用户创建的数据库对象，和SYSTEM类似</div><div class="line">EXAMPLE  # 安装Oracle 11g数据库示例来使用的表空间</div></pre></td></tr></table></figure></p>
<p>user_tablespaces普通用户登录后查看的用户字典<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">desc user_tablespaces</div><div class="line">select tablespace_name from user_tablespaces;</div><div class="line">TABLESPACE_NAME</div><div class="line">SYSTEM  # 主要是用来存放sys用户的表，视图以及存储过程的数据库对象，也称为系统表空间</div><div class="line">SYSAUX  # EXAMPLE的辅助表空间</div><div class="line">UNDOTBS1  # 用户存储一些撤销信息的，属于UNDO类型的表空间</div><div class="line">TEMP  # 处理表的索引信息的，临时表空间</div><div class="line">USERS  # 永久性表空间，存储用户创建的数据库对象，和SYSTEM类似</div><div class="line">EXAMPLE  # 安装Oracle 11g数据库示例来使用的表空间</div></pre></td></tr></table></figure></p>
<ul>
<li>dba_users、user_users数据字典  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">desc dba_users</div><div class="line">select default_tablespace,temporary_tablespace from dba_users where username= &apos;SYSTEM&apos;;</div><div class="line">DEFAULT_TABLESPACE  TEMPORARY_TABLESPACE</div><div class="line">USERS               TEMP</div></pre></td></tr></table></figure>
<ul>
<li>设置用户的默认或临时表空间<br>ALTER USER username DEFAULT|TEMPORARY TABLESPACE tablespace_name</li>
</ul>
<h3 id="创建，修改，删除表空间"><a href="#创建，修改，删除表空间" class="headerlink" title="创建，修改，删除表空间"></a>创建，修改，删除表空间</h3><ul>
<li>创建表空间<br>CREATE [TEMPORARY] TABLESPACE tablespace_name TEMPFILE|DATAFILE ‘xx.dbf’ SIZE xx;  </li>
</ul>
<p>创建永久表空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">create tablespace test1_tablespace datafile &apos;test1file.dbf&apos; size 10m;</div><div class="line">desc dba_data_files</div><div class="line">select file_name from dba_data_files where tablespace_name=&apos;TEST1_TABLESPACE&apos;;</div></pre></td></tr></table></figure></p>
<p>创建临时表空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">create temporary tablespace temptest1_tablespace tempfile &apos;tempfile1.dbf&apos; size 10m;</div><div class="line">desc dba_temp_files</div><div class="line">select file_name from dba_temp_files where tablespace_name=&apos;TEMPTEST1_TABLESPACE&apos;;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>修改表空间  </p>
<ul>
<li><p>修改表空间的状态  </p>
<ul>
<li>设置联机或脱机状态<br>  ALTER TABLESPACE tablespace_name ONLINE|OFFLINE;<br>  查看表空间状态<br>  desc dba_tablespaces<br>  select status from dba_tablespaces where tablespace_name=’TEST1_TABLESPACE’;  </li>
<li>设置只读或可读写状态<br>  ALTER TABLESPACE　tablespace_name READ ONLY|READ WRITE  </li>
</ul>
</li>
<li><p>修改数据文件  </p>
<ul>
<li>增加数据文件<br>ALTER TABLESPACE tablespace_name ADD DATAFILE ‘xx.dbf’ SIZE xx;<br>查看数据文件<br>select file_name from dba_data_files where tablespace_name=’TEST1_TABLESPACE’;</li>
<li>删除数据文件<br>ALTER TABLESPACE tablespace_name DROP DATAFILE ‘filename.dbf’<br>注意：不能删除第一个数据文件(创建表空间时设置的数据文件)  </li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>删除表空间<br>DROP TABLESPACE tablespace_name [INCLUDING CONTENTS]；<br>INCLUDING CONTENTS 删除表空间同时删除数据文件  </p>
</li>
<li><p>查看表空间状态<br>desc dba_tablespaces<br>select status from dba_tablespaces where tablespace_name=’TEST1_TABLESPACE’;<br>默认的联机状态就是读写状态  </p>
</li>
</ul>
<h1 id="表与约束"><a href="#表与约束" class="headerlink" title="表与约束"></a>表与约束</h1><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><h3 id="认识表"><a href="#认识表" class="headerlink" title="认识表"></a>认识表</h3><ul>
<li>基本存储单位  </li>
<li>二维结构</li>
<li>行和列</li>
</ul>
<p>列(域和字段)<br>行(记录)  </p>
<p>约定：</p>
<ol>
<li>每一列数据必须具有相同的数据类型。  </li>
<li>列名唯一  </li>
<li>每一行数据的唯一性  </li>
</ol>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li><p>字符型<br>CHAR(n) MAX:2000<br>NCHAR(n) UNICODE格式存放数据 MAX:1000<br>VARCHAR2(n) MAX:4000<br>NVARCHAR2(n) UNICODE格式 MAX:2000  </p>
</li>
<li><p>数值型<br>NUMBER(p,s) p:有效数字 s:小数后的位数,正小数点到最低位，负最高位到小数点<br>NUMBER(5,2) 有效数字5位，保留2位小数，如123.45<br>FLOAT(n) 二进制数字  </p>
</li>
<li><p>日期型<br>DATE DATE类型表示范围：公元前4712年1月1日到公元前9999年12月31日<br>TIMESTAMP  </p>
</li>
<li><p>其他类型<br>BLOB 二进制数据 MAX:4G<br>CLOB 字符串形式</p>
</li>
</ul>
<h3 id="管理表"><a href="#管理表" class="headerlink" title="管理表"></a>管理表</h3><ul>
<li>创建表  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE table_name</div><div class="line">(</div><div class="line">    column_name datatype,...</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>查看表信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">desc table_name</div></pre></td></tr></table></figure></p>
<ul>
<li>修改表  <ul>
<li>添加字段<br>ALTER TABLE table_name ADD column_name datatype;  </li>
<li>更改字段数据类型<br>ALTER TABLE table_name MODIFY column_name datatype;  </li>
<li>删除字段<br>ALTER TABLE table_name DROP COLUMN column_name;  </li>
<li>修改字段名<br>ALTER TABLE table_name RENAME COLUMN column_name TO new_column_name;  </li>
<li>修改表名<br>RENAME table_name TO new_table_name;</li>
</ul>
</li>
</ul>
<ul>
<li>删除表<br>TRUNCATE TABLE table_name;<br>DROP TABLE table_name;</li>
</ul>
<ul>
<li>操作表中的数据  <ul>
<li>添加数据<br>INSERT INTO table_name<br>(column1,column2,…)<br>VALUES(value1,value2,…);<br>当前时间sysdate<br>即使设置了默认值也必须设值  </li>
<li>修改数据<br>UPDATE table_name SET column1=value1,… [WHERE conditions];  </li>
<li>删除数据<br>DELETE FROM table_name [WHERE conditions];  </li>
</ul>
</li>
</ul>
<p>复制表数据  </p>
<p>在建表时复制<br>CREATE TABLE table_new AS SELECT column1,…|* FROM table_old  </p>
<p>在添加时复制<br>INSERT INTO table_new [(column1,…)] SELECT column1,…|* FROM table_old  </p>
<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="约束的作用"><a href="#约束的作用" class="headerlink" title="约束的作用"></a>约束的作用</h2><ul>
<li>定义规则  </li>
<li>确保完整性  </li>
</ul>
<h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2><ul>
<li><p>在创建表时设置非空约束  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE table_name(  </div><div class="line">    column_name datatype NOT NULL,...</div><div class="line">)</div></pre></td></tr></table></figure>
</li>
<li><p>在修改表时添加非空约束  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name MODIFY column_name datatype NOT NULL;</div></pre></td></tr></table></figure>
</li>
<li><p>在修改表时去除非空约束  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name MODIFY column_name datatype NULL;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><p>作用：确保表当中每一行数据的唯一性<br>非空 唯一<br>一张表只能设计一个主键约束<br>主键约束可以由多个字段构成(联合主键或复合主键)  </p>
<ul>
<li>在创建表时设置主键约束<br>列级<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE table_name(</div><div class="line">    column_name datatype PRIMARY KEY,...</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>表级<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE table_name(</div><div class="line">    column_name datatype ,</div><div class="line">    ...,</div><div class="line">    CONSTRAINT constraint_name PRIMARY KEY(column_name1,...)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<ul>
<li><p>在修改表时添加主键约束  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name  S</div><div class="line">ADD CONSTRAINTS constraint_name PRIMARY KEY(column_name1,...);</div></pre></td></tr></table></figure>
</li>
<li><p>更改约束的名称  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name  </div><div class="line">RENAME CONSTRAINT old_name TO new_name;</div></pre></td></tr></table></figure>
</li>
<li><p>删除主键约束  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 禁用</div><div class="line">ALTER TABLE table_name  </div><div class="line">DISABLE|ENABLE CONSTRAINT constraint_name;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 删除</div><div class="line">ALTER TABLE table_name  </div><div class="line">DROP CONSTRAINT constraint_name;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 级联删除</div><div class="line">ALTER TABLE table_name  </div><div class="line">DROP PRIMARY KEY[CASCADE];</div></pre></td></tr></table></figure>
<h2 id="查看约束"><a href="#查看约束" class="headerlink" title="查看约束"></a>查看约束</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">desc user_constraints;</div><div class="line">select constraints_name,constraint_type,status from user_constraints where table_name=&apos;TABLE_NAME&apos;</div></pre></td></tr></table></figure>
<h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><ul>
<li>在创建表时设置外键约束<br>设置外键约束时，主表的字段必须是主键<br>主从表中相应的字段必须是同一数据类型<br>从表中外键字段的值必须来自主表中的相应字段的值，或者为null值<br>table1从表<br>table2主表  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE table1 </div><div class="line">(column_name datatype REFERENCES table2(column_name),...)</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE table1 (</div><div class="line">    column_name datatype ,</div><div class="line">    ...,</div><div class="line">    CONSTRAINT constraint_name FOREIGN KEY(column_name) REFERENCES table2(column_name)[ON DELETE CASCADE]</div><div class="line">)</div></pre></td></tr></table></figure>
<ul>
<li><p>在修改表时添加外键约束  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table1</div><div class="line">ADD CONSTRAINT constraint_name FOREIGN KEY(column_name) REFERENCES table2(column_name)[ON DETELE CASCADE]</div></pre></td></tr></table></figure>
</li>
<li><p>删除外键约束  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 禁用</div><div class="line">ALTER TABLE table_name  </div><div class="line">DISABLE|ENABLE CONSTRAINT constraint_name;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 删除</div><div class="line">ALTER TABLE table_name  </div><div class="line">DROP CONSTRAINT constraint_name;</div></pre></td></tr></table></figure>
<h2 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h2><p>唯一约束和主键约束的区别：<br>主键字段值必须是非空的，唯一约束允许有一个空值<br>主键在每一张表中只能有一个，唯一约束在每张表中可以有多个  </p>
<ul>
<li>在创建表时设置唯一约束  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE table_name  </div><div class="line">(column_name datatype UNIQUE,...)</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE table_name (</div><div class="line">    column_name datatype UNIQUE,</div><div class="line">    ...,</div><div class="line">    CONSTRAINT constraint_name UNIQUE(column_name)</div><div class="line">)</div></pre></td></tr></table></figure>
<ul>
<li><p>在修改表时添加唯一约束  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name  </div><div class="line">ADD CONSTRAINT constraint_name UNIQUE(column_name);</div></pre></td></tr></table></figure>
</li>
<li><p>删除唯一约束  </p>
</li>
<li>删除外键约束  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 禁用</div><div class="line">ALTER TABLE table_name  </div><div class="line">DISABLE|ENABLE CONSTRAINT constraint_name;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 删除</div><div class="line">ALTER TABLE table_name  </div><div class="line">DROP CONSTRAINT constraint_name;</div></pre></td></tr></table></figure>
<h2 id="检查约束"><a href="#检查约束" class="headerlink" title="检查约束"></a>检查约束</h2><ul>
<li>在创建表时设置检查约束  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE table_name</div><div class="line">(column_name datatype CHECK(expressions),...)</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE table_name (</div><div class="line">    column_name datatype ,</div><div class="line">    ...,</div><div class="line">    CONSTRAIN constraint_name CHECK(expressions)</div><div class="line">)</div></pre></td></tr></table></figure>
<ul>
<li><p>在修改表时添加检查约束  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name  </div><div class="line">ADD CONSTRAINT constraint_name CHECK(expressions);</div></pre></td></tr></table></figure>
</li>
<li><p>删除检查约束  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 禁用</div><div class="line">ALTER TABLE table_name  </div><div class="line">DISABLE|ENABLE CONSTRAINT constraint_name;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 删除</div><div class="line">ALTER TABLE table_name  </div><div class="line">DROP CONSTRAINT constraint_name;</div></pre></td></tr></table></figure>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="基本查询语句"><a href="#基本查询语句" class="headerlink" title="基本查询语句"></a>基本查询语句</h2><p>SELECT [DISTINCT] column_name1,…|*<br>FROM table_name<br>[WHERE conditions]  </p>
<h2 id="在SQL-PLUS中设置格式"><a href="#在SQL-PLUS中设置格式" class="headerlink" title="在SQL PLUS中设置格式"></a>在SQL PLUS中设置格式</h2><ol>
<li>COLUMN column_name HEADING new_name<br>注意：COLUMN可以简写成COL  </li>
</ol>
<p>col username heading 用户名；<br>select * from users;</p>
<ol>
<li>COLUMN column_name FORMAT dataformat<br>注意：字符类型只能设置显示的长度<br>数值类型用”9”代表一个数字  </li>
</ol>
<p>col username format a10;<br>select * from users; # 800  </p>
<p>col salary format 9999.9;<br>select * from users; # 800.0  </p>
<p>col salary format 999.9;<br>select * from users; # 800.0   ######  </p>
<p>col salary format $9999.9;<br>select * from users; # $800.0</p>
<ol>
<li>COLUMN column_name CLEAR  </li>
</ol>
<p>col username clear;<br>select * from users;  </p>
<h2 id="查询表中的所有字段及指定字段"><a href="#查询表中的所有字段及指定字段" class="headerlink" title="查询表中的所有字段及指定字段"></a>查询表中的所有字段及指定字段</h2><ul>
<li><p>查询所用字段<br>select * from table_name;  </p>
</li>
<li><p>查询指定字段<br>select username,salary from users;  </p>
</li>
</ul>
<h2 id="给字段设置别名"><a href="#给字段设置别名" class="headerlink" title="给字段设置别名"></a>给字段设置别名</h2><ul>
<li>SELECT column_name AS new_name,… FROM table_name<br>注意：AS 可以省略，用空格隔开原来的字段名和新字段名即可  </li>
</ul>
<h2 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="运算符和表达式"></a>运算符和表达式</h2><p>表达式 = 操作数 + 运算符<br>Oracle中的操作数可以有变量、常量和字段<br>算术运算符+,-*,/<br>比较运算符&gt;,&gt;=,&lt;,&lt;=,=,&lt;&gt;<br>逻辑运算符and,or,not()  </p>
<p>逻辑运算符的优先级：按not、and、or的顺序依次递减<br>比较运算符的优先级高于逻辑运算符</p>
<h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><ul>
<li>通配符的使用_,%  </li>
<li>使用LIKE查询  </li>
</ul>
<p>一个_只能代表一个字符<br>%可以代表0到多个任意字符  </p>
<h2 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h2><p>between … and …<br>not between … and …  </p>
<p>IN()<br>NOT IN()  </p>
<h2 id="对查询结果排序"><a href="#对查询结果排序" class="headerlink" title="对查询结果排序"></a>对查询结果排序</h2><p>SELECT … FROM … [WHERE …]<br>ORDER BY column1 DESC/ASC,…</p>
<h2 id="case-when语句的使用"><a href="#case-when语句的使用" class="headerlink" title="case..when语句的使用"></a>case..when语句的使用</h2><p>CASE column_name<br>WHERE value1 THEN result1,…<br>[ELSE result] END  </p>
<p>select username,case username where ‘aaa’ then ‘计算机部门’<br>when ‘bbb’ then ‘市场部门’ else ‘其他部门’ end as 部门<br>from users;  </p>
<p>CASE<br>WHERE column_name=value1<br>THEN result1,…[ELSE result] END  </p>
<p>select username,case when username=’aaa’ then ‘计算机部门’<br>when username=’bbb’ then ‘市场部门’ else ‘其他部门’ end as 部门<br>from users;  </p>
<h2 id="decode函数的使用"><a href="#decode函数的使用" class="headerlink" title="decode函数的使用"></a>decode函数的使用</h2><p>decode (column_name,value1,result1,…,defaultvalue)  </p>
<p>select username,decode(username,’aaa’,’计算机部门’,’bbb’,’市场部门’,’其他’) as 部门 from users;  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用户与表空间&quot;&gt;&lt;a href=&quot;#用户与表空间&quot; class=&quot;headerlink&quot; title=&quot;用户与表空间&quot;&gt;&lt;/a&gt;用户与表空间&lt;/h1&gt;&lt;h2 id=&quot;用户&quot;&gt;&lt;a href=&quot;#用户&quot; class=&quot;headerlink&quot; title=&quot;用户&quot;&gt;&lt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Oracle" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://yoursite.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>03_CSS浮动float</title>
    <link href="http://yoursite.com/2017/04/07/Frontend/CSS/03_CSS%E6%B5%AE%E5%8A%A8float/"/>
    <id>http://yoursite.com/2017/04/07/Frontend/CSS/03_CSS浮动float/</id>
    <published>2017-04-07T13:46:07.000Z</published>
    <updated>2017-04-07T13:46:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标准流-normal-flow"><a href="#标准流-normal-flow" class="headerlink" title="标准流(normal flow)"></a>标准流(normal flow)</h1><p>html语言当中另外一个相当重要的概念———-标准流！或者普通流。<br>标准流实际上就是一个网页内标签元素正常排列的顺序的意思；<br>比如块级元素会独占一行，行内元素会按顺序依次前后排列；<br>按照这种大前提的布局排列之下绝对不会出现列外的情况叫做标准流布局；  </p>
<h1 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h1><p>浮动的价值：<br>就是让任何盒子可以一行排列</p>
<h2 id="元素的浮动属性float"><a href="#元素的浮动属性float" class="headerlink" title="元素的浮动属性float"></a>元素的浮动属性float</h2><p>什么是浮动？<br>元素的浮动是指设置了浮动属性的元素会脱离标准文档流的控制，移动到其父元素中指定位置的过程。  </p>
<p>如何定义浮动？<br>在CSS中，通过float属性来定义浮动，其基本语法格式如下：<br>选择器{float:属性值;}  </p>
<p>float属性值：  </p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>元素向左浮动</td>
</tr>
<tr>
<td>right</td>
<td>元素向右浮动</td>
</tr>
<tr>
<td>none</td>
<td>元素不浮动（默认值）</td>
</tr>
</tbody>
</table>
<h2 id="浮动特性"><a href="#浮动特性" class="headerlink" title="浮动特性"></a>浮动特性</h2><ol>
<li>浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。</li>
<li>浮动的元素A排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。</li>
<li>一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示。</li>
<li>浮动根据元素书写的位置来显示相应的浮动。</li>
<li>元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少。</li>
<li>浮动以后的子元素，不会撑开父容器</li>
<li>如果行内元素 浮动之后就可以指定宽和高</li>
</ol>
<h2 id="清除浮动："><a href="#清除浮动：" class="headerlink" title="清除浮动："></a>清除浮动：</h2><ol>
<li>clear:left<br>clear:right<br>clear:both</li>
<li><p>使用overflow:hidden清除浮动<br>父元素(设置了height和没设置height结果可不一样，以后补充)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">overflow: hidden;/*清除子元素的浮动*/</div></pre></td></tr></table></figure>
</li>
<li><p>使用伪元素来清除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.clearfix:after &#123;</div><div class="line">    content:&quot;&quot;;</div><div class="line">    height: 0;</div><div class="line">    line-height: 0;</div><div class="line">    visibility: hidden;</div><div class="line">    display: block;</div><div class="line">    clear: both;</div><div class="line">&#125;</div><div class="line">.clearfix &#123;</div><div class="line">    zoom: 1;/*兼容ie浏览器*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="版心和布局流程"><a href="#版心和布局流程" class="headerlink" title="版心和布局流程"></a>版心和布局流程</h1><p>为什么要应用布局？<br>阅读报纸时容易发现，虽然报纸中的内容很多，但是经过合理地排版，版面依然清晰、易读。同样，在制作网页时，要想使页面结构清晰、有条理，也需要对网页进行“排版”。  </p>
<p>版心<br>“版心”是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为960px、980px、1000px等。  </p>
<p>布局流程<br>为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：</p>
<ol>
<li>确定页面的版心（可视区）。</li>
<li>分析页面中的行模块，以及每个行模块中的列模块。</li>
<li>运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;标准流-normal-flow&quot;&gt;&lt;a href=&quot;#标准流-normal-flow&quot; class=&quot;headerlink&quot; title=&quot;标准流(normal flow)&quot;&gt;&lt;/a&gt;标准流(normal flow)&lt;/h1&gt;&lt;p&gt;html语言当中另外一个相当重要
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="CSS" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>02_CSS的盒子模型</title>
    <link href="http://yoursite.com/2017/04/07/Frontend/CSS/02_CSS%E7%9A%84%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/04/07/Frontend/CSS/02_CSS的盒子模型/</id>
    <published>2017-04-07T13:46:07.000Z</published>
    <updated>2017-04-07T13:46:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="盒子模型的概念"><a href="#盒子模型的概念" class="headerlink" title="盒子模型的概念"></a>盒子模型的概念</h1><p>所谓盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。<br>每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。  </p>
<ul>
<li><p>网页就是多个盒子嵌套排列的结果。  </p>
</li>
<li><p>内边距出现在内容区域的周围，当给元素添加背景色或背景图像时，该元素的背景色或背景图像也将出现在内边距中。</p>
</li>
<li>外边距是该元素与相邻元素之间的距离。</li>
<li>如果给元素定义边框属性，边框将出现在内边距和外边距之间。  </li>
</ul>
<blockquote>
<p>注意：虽然盒子模型拥有内边距、边框、外边距、宽和高这些基本属性，但是并不要求每个元素都必须定义这些属性。</p>
</blockquote>
<h1 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h1><p>margin-top:上外边距<br>margin-right:右外边距<br>margin-bottom:下外边距<br>margin-left:上外边距<br>margin:上外边距 [右外边距  下外边距  左外边距]</p>
<p><strong>对块元素应用宽度属性width，并将左右的外边距都设置为auto，可使块级元素水平居中，实际工作中常用这种方式进行网页布局</strong><br>示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.header&#123; width:960px; margin:0 auto;&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。  </p>
</blockquote>
<h2 id="外边距的合并"><a href="#外边距的合并" class="headerlink" title="外边距的合并"></a>外边距的合并</h2><h3 id="相邻块元素垂直外边距的合并"><a href="#相邻块元素垂直外边距的合并" class="headerlink" title="相邻块元素垂直外边距的合并:"></a>相邻块元素垂直外边距的合并:</h3><p><img src="http://oo22worto.bkt.clouddn.com/%E7%9B%B8%E9%82%BB%E5%9D%97%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%E5%A4%96%E8%BE%B9%E8%B7%9D%E7%9A%84%E5%90%88%E5%B9%B6.png" alt="相邻块元素垂直外边距的合并"><br>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</p>
<h3 id="嵌套块元素垂直外边距的合并"><a href="#嵌套块元素垂直外边距的合并" class="headerlink" title="嵌套块元素垂直外边距的合并:"></a>嵌套块元素垂直外边距的合并:</h3><p><img src="http://oo22worto.bkt.clouddn.com/%E5%B5%8C%E5%A5%97%E5%9D%97%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%E5%A4%96%E8%BE%B9%E8%B7%9D%E7%9A%84%E5%90%88%E5%B9%B6.png" alt="嵌套块元素垂直外边距的合并">  </p>
<ul>
<li>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。</li>
<li>如果希望外边距不合并，可以为父元素定义1像素的上边框或上内边距。这里以定义父元素的上边框为例，在父<div>的CSS样式中增加如下代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">border-top:1px solid #FCC;/*定义父div的上边框*/</div></pre></td></tr></table></figure>
</div></li>
</ul>
<h1 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h1><h2 id="边框样式（border-style）"><a href="#边框样式（border-style）" class="headerlink" title="边框样式（border-style）"></a>边框样式（border-style）</h2><p>样式：<br>border-top/right/bottom/left-style:;<br>border-style:top right bottom left;  </p>
<p>边框样式用于定义页面中边框的风格，常用属性值如下：  </p>
<ul>
<li>none：没有边框即忽略所有边框的宽度（默认值）</li>
<li>solid：边框为单实线</li>
<li>dashed：边框为虚线</li>
<li>dotted：边框为点线</li>
<li>double：边框为双实线</li>
</ul>
<h2 id="边框宽度（border-width）"><a href="#边框宽度（border-width）" class="headerlink" title="边框宽度（border-width）"></a>边框宽度（border-width）</h2><p>宽度<br>border-top/right/bottom/left-width:;<br>border-width:top right bottom left;  </p>
<h2 id="边框颜色（border-color）"><a href="#边框颜色（border-color）" class="headerlink" title="边框颜色（border-color）"></a>边框颜色（border-color）</h2><p>颜色<br>border-top/right/bottom/left-color:;<br>border-color:top right bottom left;  </p>
<blockquote>
<p>注意：设置边框颜色时同样必须设置边框样式，如果未设置样式或设置为none，则其他的边框属性无效。</p>
</blockquote>
<h2 id="综合设置边框-复合属性"><a href="#综合设置边框-复合属性" class="headerlink" title="综合设置边框(复合属性)"></a>综合设置边框(复合属性)</h2><p>border[-top right bottom left]:宽度 样式 颜色;  </p>
<ul>
<li>像border、border-top等这样，能够一个属性定义元素的多种样式，在CSS中称之为复合属性。</li>
<li>常用的复合属性有font、border、margin、padding和background等。</li>
<li>复合属性可以简化代码，提高页面的运行速度，但是如果只有一项值，最好不要应用复合属性，以免样式不被兼容。</li>
</ul>
<h2 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h2><p>border-radius<br>border-top-left-radius: //左上角<br>border-top-right-radius: //右上角<br>border-bottom-right-radius: //右下角<br>border-bottom-left-radius: //左下角<br>分别是水平方向和竖直方向半径，第二值省略的情况下，水平方向和竖直方向的半径相等。<br>border-radius 只有在以下版本的浏览器：Firefox4.0+、Safari5.0+、Google Chrome 10.0+、Opera 10.5+、IE9+ 支持 border-radius 标准语法格式，对于老版的浏览器，border-radius 需要根据不同的浏览器内核添加不同的前缀，比说 Mozilla 内核需要加上“-moz”，而 Webkit 内核需要加上“-webkit”等，但是IE和Opera没有私有格式，因此为了最大程度的兼容浏览器，我们需要设置如下：<br>-webkit-border-radius: 10px 20px 30px;<br>-moz-border-radius: 10px 20px 30px;<br>border-radius: 10px 20px 30px;<br><a href="http://blog.csdn.net/liuyan19891230/article/details/50724630" target="_blank" rel="external">CSS3的border-radius属性详解</a></p>
<h2 id="多学几招"><a href="#多学几招" class="headerlink" title="多学几招"></a>多学几招</h2><ol>
<li>表单的边框通常改为 0；<br><code>border:0 none;</code></li>
<li>表格的细线边框<br><code>table { border-collapse:collapse; }</code></li>
<li>轮廓 （链接有虚线 和  文本框  有 蓝色边框）<br><code>outline-style:none;</code></li>
</ol>
<p>在制作网页的过程中，如果涉及到了页面的宽高的问题，最好用width和height去解决，才用padding,最后才考虑margin.<br>因为margin在布局中会存在兼容性的问题</p>
<h1 id="内边距属性"><a href="#内边距属性" class="headerlink" title="内边距属性"></a>内边距属性</h1><p>padding-top:上内边距<br>padding-right:右内边距<br>padding-bottom:下内边距<br>padding-left:左内边距<br>padding:上内边距[右内边距 下内边距  左内边距]  </p>
<p>为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*&#123;</div><div class="line">	padding:0;         /*清除内边距*/</div><div class="line">	margin:0;          /*清除外边距*/</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：行内元素尽量不要给上下的margin 和padding</p>
</blockquote>
<h1 id="盒子的宽与高"><a href="#盒子的宽与高" class="headerlink" title="盒子的宽与高"></a>盒子的宽与高</h1><ul>
<li>使用宽度属性width和高度属性height可以对盒子的大小进行控制。</li>
<li>width和height的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。</li>
<li>大多数浏览器，如Firefox、IE6及以上版本都采用了W3C规范，符合CSS规范的盒子模型的总宽度和总高度的计算原则是：<br>盒子的总宽度= width+左右内边距之和+左右边框宽度之和+左右外边距之和<br>盒子的总高度= height+上下内边距之和+上下边框宽度之和+上下外边距之和</li>
</ul>
<blockquote>
<p>注意：</p>
<ol>
<li>宽度属性width和高度属性height仅适用于块级元素，对行内元素无效<code>&lt;img /&gt;标记和&lt;input /&gt;除外</code></li>
<li>计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;盒子模型的概念&quot;&gt;&lt;a href=&quot;#盒子模型的概念&quot; class=&quot;headerlink&quot; title=&quot;盒子模型的概念&quot;&gt;&lt;/a&gt;盒子模型的概念&lt;/h1&gt;&lt;p&gt;所谓盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。&lt;br&gt;每个矩
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="CSS" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>04_CSS的overflow</title>
    <link href="http://yoursite.com/2017/04/07/Frontend/CSS/04_CSS%E7%9A%84overflow/"/>
    <id>http://yoursite.com/2017/04/07/Frontend/CSS/04_CSS的overflow/</id>
    <published>2017-04-07T13:46:07.000Z</published>
    <updated>2017-04-07T13:46:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS标签的显示和隐藏："><a href="#CSS标签的显示和隐藏：" class="headerlink" title="CSS标签的显示和隐藏："></a>CSS标签的显示和隐藏：</h1><h1 id="overflow"><a href="#overflow" class="headerlink" title="overflow:"></a>overflow:</h1><ul>
<li>hidden:超出部分隐藏。</li>
<li>scroll:滚动条（超出的部分会显示在滚动条之内）</li>
<li>auto:如果内容超出会显示滚动条，如果没有那么会自动隐藏。</li>
</ul>
<h1 id="display-none-隐藏元素"><a href="#display-none-隐藏元素" class="headerlink" title="display:none;   隐藏元素"></a>display:none;   隐藏元素</h1><p>完全隐藏原来的div，不占位置<br>display:none;  隐藏<br>display:block;  显示  </p>
<h1 id="visibility-隐藏元素"><a href="#visibility-隐藏元素" class="headerlink" title="visibility:      隐藏元素"></a>visibility:      隐藏元素</h1><p>visibility也会隐藏原来的div但是div还是会占据着自己的位置不放，屏幕上显示的是空白。</p>
<ul>
<li>visible;默认值。元素是可见的。</li>
<li>hidden;元素是不可见的。</li>
<li>collapse;当在表格元素中使用时，此值可删除一行或一列，但是它不会影响表格的布局。被行或列占据的空间会留给其他内容使用。如果此值被用在其他的元素上，会呈现为 “hidden”。</li>
<li>inherit;规定应该从父元素继承 visibility 属性的值。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS标签的显示和隐藏：&quot;&gt;&lt;a href=&quot;#CSS标签的显示和隐藏：&quot; class=&quot;headerlink&quot; title=&quot;CSS标签的显示和隐藏：&quot;&gt;&lt;/a&gt;CSS标签的显示和隐藏：&lt;/h1&gt;&lt;h1 id=&quot;overflow&quot;&gt;&lt;a href=&quot;#overf
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="CSS" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>05_CSS定位position</title>
    <link href="http://yoursite.com/2017/04/07/Frontend/CSS/05_CSS%E5%AE%9A%E4%BD%8Dposition/"/>
    <id>http://yoursite.com/2017/04/07/Frontend/CSS/05_CSS定位position/</id>
    <published>2017-04-07T13:46:07.000Z</published>
    <updated>2017-04-07T13:46:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="position"><a href="#position" class="headerlink" title="position"></a>position</h1><p>浮动是没有占据页面的位置的。<br>绝对定位：也不占据页面的位置。  </p>
<p>即：脱离了文档流  </p>
<p>可以使用top,bottom,left,right属性进行定位</p>
<h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><p>position:relative<br>在页面上会占据位置，<br>相对定位是相对于原来的位置定位的。  </p>
<p>总结：绝对定位相当于是一种特殊的”浮动”.  </p>
<h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><p>position:fixed;<br>在页面上不会占据位置。<br>表现：不管页面到了哪里，图片永远都停留在屏幕的同一位置。  </p>
<h2 id="决定定位"><a href="#决定定位" class="headerlink" title="决定定位"></a>决定定位</h2><p>position:relative;<br>在页面上不会占据位置。<br><strong>如果给一个行内元素设置了position:absolute，那么这上行内元素会自动转成行内块元素。</strong></p>
<blockquote>
<p>一般情况下定位的使用：<br>子绝父相：<br>将来在使用定位的时候最好在<br>1）父元素中使用子元素定位，<br>2）并且遵守一个约定：父元素使用相对定位，子元素使用绝对定位。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;position&quot;&gt;&lt;a href=&quot;#position&quot; class=&quot;headerlink&quot; title=&quot;position&quot;&gt;&lt;/a&gt;position&lt;/h1&gt;&lt;p&gt;浮动是没有占据页面的位置的。&lt;br&gt;绝对定位：也不占据页面的位置。  &lt;/p&gt;
&lt;p&gt;即：脱
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="CSS" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>01_CSS的格式与选择器</title>
    <link href="http://yoursite.com/2017/04/07/Frontend/CSS/01_CSS%E7%9A%84%E6%A0%BC%E5%BC%8F%E4%B8%8E%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://yoursite.com/2017/04/07/Frontend/CSS/01_CSS的格式与选择器/</id>
    <published>2017-04-07T13:46:07.000Z</published>
    <updated>2017-04-07T13:46:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="W3C"><a href="#W3C" class="headerlink" title="W3C"></a>W3C</h1><p>World Wide Web Consortium<br>中文是W3C组织或者万维网联盟<br>就是出网页标准的<br>web标准不止一个,而是一系列标准,由W3C和其他标准化组织制定  </p>
<table>
<thead>
<tr>
<th>页面</th>
<th>语言</th>
</tr>
</thead>
<tbody>
<tr>
<td>行为层(Behavior)</td>
<td>JavaScript</td>
</tr>
<tr>
<td>表现层(Presentation)</td>
<td>CSS</td>
</tr>
<tr>
<td>结构层(Structure)</td>
<td>HTML</td>
</tr>
<tr>
<td>内容层</td>
<td>文字</td>
</tr>
</tbody>
</table>
<h1 id="CSS-Cascading-Style-Sheets"><a href="#CSS-Cascading-Style-Sheets" class="headerlink" title="CSS(Cascading Style Sheets)"></a>CSS(Cascading Style Sheets)</h1><p>层叠样式表</p>
<h1 id="CSS样式规则"><a href="#CSS样式规则" class="headerlink" title="CSS样式规则"></a>CSS样式规则</h1><p>选择器{属性:值}</p>
<p>选择器(Selector)<br>属性(property)<br>值(value)</p>
<h1 id="CSS和HTML的结合方式-四种结合和方式"><a href="#CSS和HTML的结合方式-四种结合和方式" class="headerlink" title="CSS和HTML的结合方式:(四种结合和方式)"></a>CSS和HTML的结合方式:(四种结合和方式)</h1><ol>
<li><p>在每个html标签上面都有一个属性 style 把css和html结合在一起</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;background-color:red;color:green;&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>使用html的一个标签实现<code>&lt;style&gt;</code>标签,写在head里面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">css代码</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>在style标签里面使用语句(在某些浏览器下不起作用)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import url(css文件的路径);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>创建一个css文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">    @import url(&quot;aaa.css&quot;);</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<ol>
<li>使用头标签 link ,引入外部css文件(一般使用第四种方式)<br>创建一个css文件，使用下面方式引入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;aaa.css&quot;/&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>style &gt; id选择器 &gt; class选择器 &gt; 标签选择器<br><code>权重是叠加的</code><br>!important    权重最高的  </p>
<p>通配选择符:    *{属性:值}    用于定义所有的html元素<br>作用范围很广,但是效率最低,慎用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">*&#123;border:0 none;margin:0;padding:0;&#125; </div><div class="line">//由于各个浏览器存在着,内外边距的,默认值,还不同  </div><div class="line">//所以,需要将所有浏览器的默认内外边距,都从零开始计算  </div><div class="line">//重置所有元素的,外边距和内边距,为零  </div><div class="line">//大型网站一般不这么用,一般都把所有用的标签写上去  </div><div class="line">body,ul,ol,li,p,h1,h2,h3,h4,h5,h6,form,fieldset,table,td,img,div&#123;</div><div class="line">    border:0 none;</div><div class="line">    margin:0;</div><div class="line">    padding:0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>//css的属性,虽然有继承的特点,但是并不是,所有的属性都有继承<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!--</div><div class="line">h1#content&#123;&#125;	表示针对所有id为content的h1标签</div><div class="line">h1.p1&#123;&#125;		表示针对所有class为p1的h1标签</div><div class="line">很少使用</div><div class="line">--&gt;</div></pre></td></tr></table></figure></p>
<h2 id="CSS的扩展选择器"><a href="#CSS的扩展选择器" class="headerlink" title="CSS的扩展选择器"></a>CSS的扩展选择器</h2><ol>
<li>交集选择器</li>
<li>合选择器</li>
<li>伪元素选择器<br>CSS里面提供了一些定义好的样式,可以拿过来使用<br>比如<br>超链接<code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code><br>|   超链接的状态     |      |<br>| —- | —- |<br>|   原始状态   |  :link    |<br>|   鼠标放上去的状态   |   :hover   |<br>|   点击   |   :active   |<br>|   点击之后   |   :visited   |  </li>
</ol>
<p>输入框<code>&lt;input type=&quot;&quot;&gt;</code><br>:focus    设置对象在成为输入焦点(该对象的onfocus事件发生时的样式    IE6/7不支持)</p>
<h1 id="块级元素和行内元素"><a href="#块级元素和行内元素" class="headerlink" title="块级元素和行内元素"></a>块级元素和行内元素</h1><h2 id="块级元素："><a href="#块级元素：" class="headerlink" title="块级元素："></a>块级元素：</h2><p>一个div单独占一行。<br>像这一些元素：（默认没有高但是有宽并且宽度默认占一行的元素）叫做块级元素。<br>特点：单独占一行，并且可以设置宽高。<br>常见块状元素为body,div,p,h1~h6,ul,li等</p>
<h2 id="行内元素："><a href="#行内元素：" class="headerlink" title="行内元素："></a>行内元素：</h2><p>像这一些元素：可以在一行中显示多个标签的元素叫行内元素。<br>特点：一行同显示多个，设置宽高没有效果。  </p>
<h2 id="行内块级元素：（其实这样的元素是不存在的，但是可以通过后天的努力来改变自己）"><a href="#行内块级元素：（其实这样的元素是不存在的，但是可以通过后天的努力来改变自己）" class="headerlink" title="行内块级元素：（其实这样的元素是不存在的，但是可以通过后天的努力来改变自己）"></a>行内块级元素：（其实这样的元素是不存在的，但是可以通过后天的努力来改变自己）</h2><p>display:用来设置页面元素的显示方式。</p>
<ul>
<li>block:块级元素。</li>
<li>inline:行内元素。</li>
<li>inline-block:行内块级元素。</li>
</ul>
<h2 id="CSS标签的嵌套关系："><a href="#CSS标签的嵌套关系：" class="headerlink" title="CSS标签的嵌套关系："></a>CSS标签的嵌套关系：</h2><p>行内元素：span,u,b,i,strong<br>块级元素：h1,h2,h3–h6,div,p<br>原则：</p>
<ol>
<li>行内元素可以嵌套行内元素，但是不能嵌套块级元素</li>
<li>块级元素可以嵌套行内元素。</li>
<li>少数块级元素不可以嵌套其它的块行元素：<br>在p标签中不可以使用div。<br>在h标签中最好不要用div。  </li>
</ol>
<h2 id="页面模块的常用css命名"><a href="#页面模块的常用css命名" class="headerlink" title="页面模块的常用css命名"></a>页面模块的常用css命名</h2><p>头:    header<br>内容:    content<br>尾:    footer<br>导航:    nav<br>侧栏:    sidebar<br>栏目:    column<br>页面外围控制整体布局宽度:    wrapper<br>左中右:    left center right<br>登入条:    loginbar<br>标志:    logo<br>热点:    hot<br>新闻:    news<br>下载:    download<br>广告:    banner<br>页面主体:    main<br>子导航:    subnav<br>菜单:    menu<br>子菜单:    submenu<br>版权:    copyright<br>友情链接:    friendlinks</p>
<p>zoom<br>设置或检索对象的缩放比例<br>normal:默认值.使用对象的实际尺寸<br>number:百分数|无符号浮点实数.浮点实数值为1.0或百分数为100%时相当于此属性的normal  </p>
<p>zoom:1 解决IE6高度自适应问题  </p>
<p>cursor:pointer;<br>鼠标移上会变小手  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;W3C&quot;&gt;&lt;a href=&quot;#W3C&quot; class=&quot;headerlink&quot; title=&quot;W3C&quot;&gt;&lt;/a&gt;W3C&lt;/h1&gt;&lt;p&gt;World Wide Web Consortium&lt;br&gt;中文是W3C组织或者万维网联盟&lt;br&gt;就是出网页标准的&lt;br&gt;web标准不
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="CSS" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>06_CSS字体和文本样式</title>
    <link href="http://yoursite.com/2017/04/07/Frontend/CSS/06_CSS%E5%AD%97%E4%BD%93%E5%92%8C%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/04/07/Frontend/CSS/06_CSS字体和文本样式/</id>
    <published>2017-04-07T13:46:07.000Z</published>
    <updated>2017-04-07T13:46:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS字体样式属性"><a href="#CSS字体样式属性" class="headerlink" title="CSS字体样式属性"></a>CSS字体样式属性</h1><h2 id="font-size-字号大小"><a href="#font-size-字号大小" class="headerlink" title="font-size:字号大小"></a>font-size:字号大小</h2><p>font-size属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长度单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。具体如下：</p>
<h2 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family:字体"></a>font-family:字体</h2><p>font-family属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下CSS样式代码：<br><code>p{ font-family:&quot;微软雅黑&quot;;}</code><br>可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。<br>使用font-family设置字体时，需要注意以下几点：</p>
<ul>
<li>各种字体之间必须使用英文状态下的逗号隔开。  </li>
<li>中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。  </li>
<li>如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: “Times New Roman”;。  </li>
<li>尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。      </li>
<li>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。</li>
<li>为此，在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。<br><code>font-family: &quot;\5FAE\8F6F\96C5\9ED1&quot;</code>，表示设置字体为“微软雅黑”。  </li>
<li>可以通过escape()  来得到</li>
</ul>
<h2 id="font-weight-字体粗细"><a href="#font-weight-字体粗细" class="headerlink" title="font-weight:字体粗细"></a>font-weight:字体粗细</h2><p>font-weight属性用于定义字体的粗细，<br>其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。</p>
<h2 id="font-style-字体风格"><a href="#font-style-字体风格" class="headerlink" title="font-style:字体风格"></a>font-style:字体风格</h2><p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：<br>normal：默认值，浏览器会显示标准的字体样式。<br>italic：浏览器会显示斜体的字体样式。<br>oblique：浏览器会显示倾斜的字体样式。</p>
<h2 id="font-综合设置字体样式"><a href="#font-综合设置字体样式" class="headerlink" title="font:综合设置字体样式"></a>font:综合设置字体样式</h2><p>font属性用于对字体样式进行综合设置，其基本语法格式如下：<br><code>选择器{font: font-style  font-weight  font-size/line-height  font-family;}</code><br>使用font属性时，必须按上面语法格式中的顺序书写，各个属性以空格隔开。<br>其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。</p>
<h1 id="CSS文本外观属性"><a href="#CSS文本外观属性" class="headerlink" title="CSS文本外观属性"></a>CSS文本外观属性</h1><h2 id="color-文本颜色"><a href="#color-文本颜色" class="headerlink" title="color:文本颜色"></a>color:文本颜色</h2><p>color属性用于定义文本的颜色，其取值方式有如下3种：<br>预定义的颜色值，如red，green，blue等。<br>十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式。<br>RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%)。<br>需要注意的是，如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。  </p>
<h2 id="letter-spacing-字间距"><a href="#letter-spacing-字间距" class="headerlink" title="letter-spacing:字间距"></a>letter-spacing:字间距</h2><p>letter-spacing属性用于定义字间距，所谓字间距就是字符与字符之间的空白。<br>其属性值可为不同单位的数值，允许使用负值，默认为normal。</p>
<h2 id="word-spacing-单词间距"><a href="#word-spacing-单词间距" class="headerlink" title="word-spacing:单词间距"></a>word-spacing:单词间距</h2><p>word-spacing属性用于定义英文单词之间的间距，对中文字符无效。<br>和letter-spacing一样，其属性值可为不同单位的数值，允许使用负值，默认为normal。<br>word-spacing和letter-spacing均可对英文进行设置。<br>不同的是letter-spacing定义的为字母之间的间距，而word-spacing定义的为英文单词之间的间距。</p>
<h2 id="line-height-行间距"><a href="#line-height-行间距" class="headerlink" title="line-height:行间距"></a>line-height:行间距</h2><p>line-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。<br>line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px。</p>
<h2 id="text-decoration-文本装饰"><a href="#text-decoration-文本装饰" class="headerlink" title="text-decoration:文本装饰"></a>text-decoration:文本装饰</h2><p>text-decoration属性用于设置文本的下划线，上划线，删除线等装饰效果，其可用属性值如下：</p>
<ul>
<li>none：没有装饰（正常文本默认值）。</li>
<li>underline：下划线。</li>
<li>overline：上划线。</li>
<li>line-through：删除线。  </li>
</ul>
<p>另外，text-decoration后可以赋多个值，用于给文本添加多种显示效果，<br>例如希望文字同时有下划线和删除线效果，就可以将underline和line-through同时赋给text-decoration。</p>
<h2 id="text-align-水平对齐方式"><a href="#text-align-水平对齐方式" class="headerlink" title="text-align:水平对齐方式"></a>text-align:水平对齐方式</h2><p>text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：</p>
<ul>
<li>left：左对齐（默认值）</li>
<li>right：右对齐</li>
<li>center：居中对齐</li>
</ul>
<h2 id="text-indent-首行缩进"><a href="#text-indent-首行缩进" class="headerlink" title="text-indent:首行缩进"></a>text-indent:首行缩进</h2><p>text-indent属性用于设置首行文本的缩进，<br>其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值,<br>建议使用em作为设置单位。</p>
<h2 id="white-space-空白符处理"><a href="#white-space-空白符处理" class="headerlink" title="white-space:空白符处理"></a>white-space:空白符处理</h2><p><strong>使用HTML制作网页时，不论源代码中有多少空格，在浏览器中只会显示一个字符的空白。</strong><br>在CSS中，使用white-space属性可设置空白符的处理方式，其属性值如下：</p>
<ul>
<li>normal：常规（默认值），文本中的空格、空行无效，满行（到达区域边界）后自动换行。</li>
<li>pre：预格式化，按文档的书写格式保留空格、空行原样显示。</li>
<li>nowrap：空格空行无效，强制文本不能换行，除非遇到换行标记<code>&lt;br /&gt;</code>。<br>内容超出元素的边界也不换行，若超出浏览器页面则会自动增加滚动条。</li>
</ul>
<h2 id="word-break-自动换行"><a href="#word-break-自动换行" class="headerlink" title="word-break:自动换行"></a>word-break:自动换行</h2><ul>
<li>normal     使用浏览器默认的换行规则。</li>
<li>break-all   允许在单词内换行。</li>
<li>keep-all    只能在半角空格或连字符处换行。</li>
</ul>
<h2 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word-wrap"></a>word-wrap</h2><p>属性允许长单词或 URL 地址换行到下一行normal     </p>
<ul>
<li>normal    只在允许的断字点换行（浏览器保持默认处理）。</li>
<li>break-word    在长单词或 URL 地址内部进行换行。  </li>
</ul>
<p>几乎得到了浏览器的支持</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS字体样式属性&quot;&gt;&lt;a href=&quot;#CSS字体样式属性&quot; class=&quot;headerlink&quot; title=&quot;CSS字体样式属性&quot;&gt;&lt;/a&gt;CSS字体样式属性&lt;/h1&gt;&lt;h2 id=&quot;font-size-字号大小&quot;&gt;&lt;a href=&quot;#font-size-字
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="CSS" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
</feed>
